{"ast":null,"code":"// Utilidades para manejar eventos de los scrapers\nimport scrapersData from '../data/scrapers.json';\n\n/**\r\n * Obtiene todos los eventos de todos los scrapers en un array plano\r\n * @returns {Array} Array de eventos con ciudad y categoría incluidas\r\n */\nexport const getAllEvents = () => {\n  const allEvents = [];\n  scrapersData.forEach(scraper => {\n    const {\n      ciudad,\n      categoria,\n      eventos\n    } = scraper;\n    eventos.forEach(evento => {\n      allEvents.push({\n        ...evento,\n        ciudad,\n        categoria\n      });\n    });\n  });\n  return allEvents;\n};\n\n/**\r\n * Obtiene todas las ciudades únicas disponibles\r\n * @returns {Array} Array de strings con nombres de ciudades\r\n */\nexport const getCities = () => {\n  const cities = [...new Set(scrapersData.map(s => s.ciudad))];\n  return cities.sort();\n};\n\n/**\r\n * Obtiene todas las categorías únicas disponibles\r\n * @returns {Array} Array de strings con nombres de categorías\r\n */\nexport const getCategories = () => {\n  const categories = [...new Set(scrapersData.map(s => s.categoria))];\n  return categories.sort();\n};\n\n/**\r\n * Filtra eventos por ciudad, categoría y fecha\r\n * @param {Object} filters - Objeto con filtros\r\n * @param {string} filters.ciudad - Ciudad a filtrar (opcional)\r\n * @param {string} filters.categoria - Categoría a filtrar (opcional)\r\n * @param {string} filters.fecha - Fecha a filtrar en formato YYYY-MM-DD (opcional)\r\n * @param {string} filters.searchTerm - Término de búsqueda libre (opcional)\r\n * @returns {Array} Array de eventos filtrados\r\n */\nexport const filterEvents = (filters = {}) => {\n  const {\n    ciudad,\n    categoria,\n    fecha,\n    searchTerm\n  } = filters;\n  let events = getAllEvents();\n\n  // Filtrar por ciudad\n  if (ciudad && ciudad !== 'todas' && ciudad !== '') {\n    events = events.filter(e => e.ciudad.toLowerCase() === ciudad.toLowerCase());\n  }\n\n  // Filtrar por categoría\n  if (categoria && categoria !== 'todas' && categoria !== '') {\n    events = events.filter(e => e.categoria.toLowerCase() === categoria.toLowerCase());\n  }\n\n  // Filtrar por fecha\n  if (fecha && fecha !== '') {\n    events = events.filter(e => {\n      if (!e.fecha) return false;\n      // Normalizar fechas al formato YYYY-MM-DD\n      const eventDate = e.fecha.split('T')[0]; // Por si viene con hora\n      return eventDate === fecha;\n    });\n  }\n\n  // Filtrar por término de búsqueda\n  if (searchTerm && searchTerm.trim() !== '') {\n    const term = searchTerm.toLowerCase();\n    events = events.filter(e => {\n      const searchableText = `\n        ${e.nombre || ''} \n        ${e.descripcion || ''} \n        ${e.lugar || ''} \n        ${e.ciudad || ''} \n        ${e.categoria || ''}\n      `.toLowerCase();\n      return searchableText.includes(term);\n    });\n  }\n  return events;\n};\n\n/**\r\n * Obtiene eventos destacados (primeros N eventos de cada ciudad)\r\n * @param {number} count - Cantidad de eventos por ciudad\r\n * @returns {Array} Array de eventos destacados\r\n */\nexport const getFeaturedEvents = (count = 3) => {\n  const featured = [];\n  const cities = getCities();\n  cities.forEach(ciudad => {\n    const cityEvents = filterEvents({\n      ciudad\n    });\n    // Tomar los primeros 'count' eventos de esta ciudad\n    featured.push(...cityEvents.slice(0, count));\n  });\n  return featured;\n};\n\n/**\r\n * Formatea una fecha al formato legible\r\n * @param {string} dateString - Fecha en formato YYYY-MM-DD\r\n * @returns {string} Fecha formateada\r\n */\nexport const formatDate = dateString => {\n  if (!dateString) return 'Fecha por definir';\n  try {\n    const date = new Date(dateString + 'T00:00:00');\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      timeZone: 'UTC'\n    };\n    return date.toLocaleDateString('es-ES', options);\n  } catch (error) {\n    return dateString;\n  }\n};\n\n/**\r\n * Abre la URL de un evento en una nueva pestaña\r\n * @param {string} url - URL del evento\r\n */\nexport const openEventURL = url => {\n  if (url) {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  }\n};\n\n/**\r\n * Obtiene eventos por ciudad específica\r\n * @param {string} ciudad - Nombre de la ciudad\r\n * @returns {Array} Array de eventos de esa ciudad\r\n */\nexport const getEventsByCity = ciudad => {\n  return filterEvents({\n    ciudad\n  });\n};\n\n/**\r\n * Obtiene eventos por categoría específica\r\n * @param {string} categoria - Nombre de la categoría\r\n * @returns {Array} Array de eventos de esa categoría\r\n */\nexport const getEventsByCategory = categoria => {\n  return filterEvents({\n    categoria\n  });\n};","map":{"version":3,"names":["scrapersData","getAllEvents","allEvents","forEach","scraper","ciudad","categoria","eventos","evento","push","getCities","cities","Set","map","s","sort","getCategories","categories","filterEvents","filters","fecha","searchTerm","events","filter","e","toLowerCase","eventDate","split","trim","term","searchableText","nombre","descripcion","lugar","includes","getFeaturedEvents","count","featured","cityEvents","slice","formatDate","dateString","date","Date","options","year","month","day","timeZone","toLocaleDateString","error","openEventURL","url","window","open","getEventsByCity","getEventsByCategory"],"sources":["C:/Users/crist/OneDrive/Documents/Clonado fronted despliegue/prueba-desplegue/Proyecto-Integrador-fronted-main/src/utils/eventsUtils.js"],"sourcesContent":["// Utilidades para manejar eventos de los scrapers\r\nimport scrapersData from '../data/scrapers.json';\r\n\r\n/**\r\n * Obtiene todos los eventos de todos los scrapers en un array plano\r\n * @returns {Array} Array de eventos con ciudad y categoría incluidas\r\n */\r\nexport const getAllEvents = () => {\r\n  const allEvents = [];\r\n  \r\n  scrapersData.forEach(scraper => {\r\n    const { ciudad, categoria, eventos } = scraper;\r\n    eventos.forEach(evento => {\r\n      allEvents.push({\r\n        ...evento,\r\n        ciudad,\r\n        categoria\r\n      });\r\n    });\r\n  });\r\n  \r\n  return allEvents;\r\n};\r\n\r\n/**\r\n * Obtiene todas las ciudades únicas disponibles\r\n * @returns {Array} Array de strings con nombres de ciudades\r\n */\r\nexport const getCities = () => {\r\n  const cities = [...new Set(scrapersData.map(s => s.ciudad))];\r\n  return cities.sort();\r\n};\r\n\r\n/**\r\n * Obtiene todas las categorías únicas disponibles\r\n * @returns {Array} Array de strings con nombres de categorías\r\n */\r\nexport const getCategories = () => {\r\n  const categories = [...new Set(scrapersData.map(s => s.categoria))];\r\n  return categories.sort();\r\n};\r\n\r\n/**\r\n * Filtra eventos por ciudad, categoría y fecha\r\n * @param {Object} filters - Objeto con filtros\r\n * @param {string} filters.ciudad - Ciudad a filtrar (opcional)\r\n * @param {string} filters.categoria - Categoría a filtrar (opcional)\r\n * @param {string} filters.fecha - Fecha a filtrar en formato YYYY-MM-DD (opcional)\r\n * @param {string} filters.searchTerm - Término de búsqueda libre (opcional)\r\n * @returns {Array} Array de eventos filtrados\r\n */\r\nexport const filterEvents = (filters = {}) => {\r\n  const { ciudad, categoria, fecha, searchTerm } = filters;\r\n  let events = getAllEvents();\r\n  \r\n  // Filtrar por ciudad\r\n  if (ciudad && ciudad !== 'todas' && ciudad !== '') {\r\n    events = events.filter(e => \r\n      e.ciudad.toLowerCase() === ciudad.toLowerCase()\r\n    );\r\n  }\r\n  \r\n  // Filtrar por categoría\r\n  if (categoria && categoria !== 'todas' && categoria !== '') {\r\n    events = events.filter(e => \r\n      e.categoria.toLowerCase() === categoria.toLowerCase()\r\n    );\r\n  }\r\n  \r\n  // Filtrar por fecha\r\n  if (fecha && fecha !== '') {\r\n    events = events.filter(e => {\r\n      if (!e.fecha) return false;\r\n      // Normalizar fechas al formato YYYY-MM-DD\r\n      const eventDate = e.fecha.split('T')[0]; // Por si viene con hora\r\n      return eventDate === fecha;\r\n    });\r\n  }\r\n  \r\n  // Filtrar por término de búsqueda\r\n  if (searchTerm && searchTerm.trim() !== '') {\r\n    const term = searchTerm.toLowerCase();\r\n    events = events.filter(e => {\r\n      const searchableText = `\r\n        ${e.nombre || ''} \r\n        ${e.descripcion || ''} \r\n        ${e.lugar || ''} \r\n        ${e.ciudad || ''} \r\n        ${e.categoria || ''}\r\n      `.toLowerCase();\r\n      return searchableText.includes(term);\r\n    });\r\n  }\r\n  \r\n  return events;\r\n};\r\n\r\n/**\r\n * Obtiene eventos destacados (primeros N eventos de cada ciudad)\r\n * @param {number} count - Cantidad de eventos por ciudad\r\n * @returns {Array} Array de eventos destacados\r\n */\r\nexport const getFeaturedEvents = (count = 3) => {\r\n  const featured = [];\r\n  const cities = getCities();\r\n  \r\n  cities.forEach(ciudad => {\r\n    const cityEvents = filterEvents({ ciudad });\r\n    // Tomar los primeros 'count' eventos de esta ciudad\r\n    featured.push(...cityEvents.slice(0, count));\r\n  });\r\n  \r\n  return featured;\r\n};\r\n\r\n/**\r\n * Formatea una fecha al formato legible\r\n * @param {string} dateString - Fecha en formato YYYY-MM-DD\r\n * @returns {string} Fecha formateada\r\n */\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return 'Fecha por definir';\r\n  \r\n  try {\r\n    const date = new Date(dateString + 'T00:00:00');\r\n    const options = { \r\n      year: 'numeric', \r\n      month: 'long', \r\n      day: 'numeric',\r\n      timeZone: 'UTC'\r\n    };\r\n    return date.toLocaleDateString('es-ES', options);\r\n  } catch (error) {\r\n    return dateString;\r\n  }\r\n};\r\n\r\n/**\r\n * Abre la URL de un evento en una nueva pestaña\r\n * @param {string} url - URL del evento\r\n */\r\nexport const openEventURL = (url) => {\r\n  if (url) {\r\n    window.open(url, '_blank', 'noopener,noreferrer');\r\n  }\r\n};\r\n\r\n/**\r\n * Obtiene eventos por ciudad específica\r\n * @param {string} ciudad - Nombre de la ciudad\r\n * @returns {Array} Array de eventos de esa ciudad\r\n */\r\nexport const getEventsByCity = (ciudad) => {\r\n  return filterEvents({ ciudad });\r\n};\r\n\r\n/**\r\n * Obtiene eventos por categoría específica\r\n * @param {string} categoria - Nombre de la categoría\r\n * @returns {Array} Array de eventos de esa categoría\r\n */\r\nexport const getEventsByCategory = (categoria) => {\r\n  return filterEvents({ categoria });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}