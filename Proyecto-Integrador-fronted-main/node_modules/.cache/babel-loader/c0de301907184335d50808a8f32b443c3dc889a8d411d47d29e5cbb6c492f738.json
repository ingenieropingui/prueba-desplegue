{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport scrapedEvents from '../data/scraped_events.json';\n// Build an indexed structure eventsData[City][Category] => [events]\nfunction inferCityFromEvent(e) {\n  const url = (e.url || '').toLowerCase();\n  if ((e.source || '').toLowerCase().includes('pablotobon') || url.includes('medellin') || url.includes('medell')) return 'Medell√≠n';\n  if ((e.source || '').toLowerCase().includes('astor') || url.includes('bogota') || url.includes('bogot')) return 'Bogot√°';\n  if (url.includes('cali')) return 'Cali';\n  if (url.includes('bucaramanga')) return 'Bucaramanga';\n  if (url.includes('cartagena')) return 'Cartagena';\n  if (url.includes('barranquilla')) return 'Barranquilla';\n  // fallback unknown\n  return 'Bogot√°';\n}\nfunction inferCategoryFromEvent(e) {\n  const text = ((e.tipo || '') + ' ' + (e.nombre || e.titulo || '') + ' ' + (e.descripcion || '')).toLowerCase();\n  if (text.match(/m(usica|√∫sica)|conciert|band|orquesta|cantante|cantor/)) return 'M√∫sica';\n  if (text.match(/teatro|obra|drama|mon√≥logo|monolog/)) return 'Culturales';\n  if (text.match(/conferencia|congreso|foro|seminar|seminario|charla/)) return 'Conferencias';\n  if (text.match(/deporte|futbol|baloncesto|carrera|maraton|marat[o√≥]n/)) return 'Deportes';\n  // fallback: if tipo field suggests teatro vs musica\n  const tipo = (e.tipo || '').toLowerCase();\n  if (tipo.includes('mus') || tipo.includes('m√∫sica')) return 'M√∫sica';\n  if (tipo.includes('teatro')) return 'Culturales';\n  return 'Culturales';\n}\nfunction buildEventsIndex(arr) {\n  const out = {};\n  arr.forEach(raw => {\n    const city = inferCityFromEvent(raw);\n    const category = inferCategoryFromEvent(raw);\n    const ev = {\n      nombre: raw.nombre || raw.titulo || '',\n      fecha: raw.fecha || null,\n      hora: raw.hora || null,\n      lugar: raw.lugar || raw.ubicacion || null,\n      descripcion: raw.descripcion || raw.summary || null,\n      url: raw.url || null\n    };\n    out[city] = out[city] || {};\n    out[city][category] = out[city][category] || [];\n    out[city][category].push(ev);\n  });\n  return out;\n}\nconst eventsData = buildEventsIndex(scrapedEvents);\nimport { genId, formatDate, parseIntent, sleep } from '../utils/chatHelpers';\n\n// NOTE: Do not change selector names or external classes. This module is pure logic.\n\n// Derivar din√°micamente las ciudades y categor√≠as a partir de los datos scrapeados\nfunction getCities() {\n  return Object.keys(eventsData).sort();\n}\nfunction getCategoriesForCity(city) {\n  if (!city) return [];\n  return Object.keys(eventsData[city] || {}).sort();\n}\nexport function useChatBot() {\n  _s();\n  const PAGE_SIZE = 1; // configurable page size (mostrar X por acci√≥n)\n\n  const [open, setOpen] = useState(true);\n  const [state, setState] = useState('idle'); // idle | esperandoCiudad | esperandoCategoria | mostrandoEventos\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [messages, setMessages] = useState(() => [{\n    id: genId('msg'),\n    sender: 'ia',\n    text: '¬°Hola! Soy tu asistente de eventos ‚Äî encantado de ayudarte. ¬øEn qu√© ciudad te gustar√≠a buscar?',\n    time: new Date().toISOString()\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // pagination index per city|category key\n  const [pages, setPages] = useState({});\n  // keep a pending city context when bot asked for category but selectedCity may not be set yet\n  const [pendingCity, setPendingCity] = useState(null);\n  const pushMessage = useCallback((sender, text) => {\n    const msg = {\n      id: genId('msg'),\n      sender,\n      text,\n      time: new Date().toISOString()\n    };\n    setMessages(m => [...m, msg]);\n    return msg;\n  }, []);\n\n  // Helper to simulate typing and then send one or multiple bot messages\n  const botReply = useCallback((items = [], delay = 600) => {\n    // items: array of message objects to push after typing\n    (async () => {\n      setIsTyping(true);\n      // push typing indicator (UI will render the animated dots)\n      const typingId = genId('typing');\n      setMessages(m => [...m, {\n        id: typingId,\n        sender: 'ia',\n        type: 'typing',\n        text: 'Un momento, busco lo mejor para ti üòä'\n      }]);\n      await sleep(delay);\n      // remove typing indicator and append items\n      setMessages(prev => prev.filter(x => x.id !== typingId).concat(items.map(it => ({\n        id: genId('msg'),\n        sender: 'ia',\n        ...it,\n        time: new Date().toISOString()\n      }))));\n      setIsTyping(false);\n    })();\n  }, []);\n  const listCities = useCallback(() => {\n    setState('esperandoCiudad');\n    // send a text prompt listing cities (conversational, user must type the city name)\n    const cities = getCities();\n    botReply([{\n      text: `Selecciona una ciudad: ${cities.join(', ')}. Escribe el nombre de la ciudad para continuar.`\n    }], 700);\n  }, [pushMessage]);\n  const listCategories = useCallback(city => {\n    setState('esperandoCategoria');\n    setPendingCity(city);\n    const cats = getCategoriesForCity(city);\n    const catsText = cats.length ? cats.join(', ') : 'No hay categor√≠as predefinidas para esta ciudad; puedes escribir palabras como M√∫sica, Teatro, Deportes.';\n    botReply([{\n      text: `Has seleccionado ${city}. ¬øQu√© categor√≠a quieres ver? ${catsText}. Escribe la categor√≠a.`\n    }], 700);\n  }, [pushMessage]);\n  const showEvents = useCallback((city, category) => {\n    setState('mostrandoEventos');\n    setSelectedCity(city);\n    setSelectedCategory(category);\n    const key = `${city}|${category}`;\n    const cityData = eventsData[city] || {};\n    const list = cityData[category] || [];\n\n    // initialize page index if needed\n    setPages(p => ({\n      ...p,\n      [key]: p[key] ? p[key] : 0\n    }));\n    if (list.length === 0) {\n      botReply([{\n        text: `Ups ‚Äî no encuentro ${category} en ${city} ahora mismo. Puedes escribir otra ciudad, otra categor√≠a, o \"volver\" para reiniciar.`\n      }], 600);\n      return;\n    }\n\n    // show PAGE_SIZE items starting from pages[key]\n    const start = pages[key] || 0;\n    const slice = list.slice(start, start + PAGE_SIZE);\n    const items = [];\n    // Use a neutral, non-counting intro to avoid revealing small totals.\n    items.push({\n      text: `Aqu√≠ tienes algunos eventos en ${category} ¬∑ ${city}:`\n    });\n    slice.forEach(ev => {\n      const formatted = {\n        ...ev,\n        fecha: formatDate(ev.fecha)\n      };\n      items.push({\n        type: 'event',\n        payload: formatted\n      });\n    });\n    // guidance for next steps (conversational)\n    const guidance = [];\n    if (start + PAGE_SIZE < list.length) guidance.push('Si quieres ver m√°s, escribe \"ver m√°s\".');\n    guidance.push('Para cambiar de ciudad escribe el nombre de la ciudad. Escribe \"volver\" para volver al inicio.');\n    items.push({\n      text: guidance.join(' ')\n    });\n    botReply(items, 800);\n  }, [pushMessage]);\n  const handleText = useCallback(text => {\n    if (!text || !text.trim()) return;\n    const t = text.trim();\n    pushMessage('user', t);\n    // use parseIntent from helpers\n    const intent = parseIntent(t);\n\n    // If parser returned a confidence score, use it to decide clarifications\n    const confidence = typeof intent.confidence === 'number' ? intent.confidence : 1.0;\n\n    // Merge parsed city/category into conversation state (do not overwrite existing unless explicit change requested)\n    const parsedCity = intent.city || null;\n    const parsedCategory = intent.category || null;\n\n    // helpers to map parsed tokens into canonical keys used by eventsData\n    function mapCity(raw) {\n      if (!raw) return null;\n      // prefer normalizeCityName if it maps\n      const byName = normalizeCityName(raw);\n      if (byName && eventsData[byName]) return byName;\n      const target = normalizeString(raw);\n      for (const k of Object.keys(eventsData)) {\n        if (normalizeString(k).startsWith(target)) return k;\n      }\n      return byName || capitalizeFirst(raw);\n    }\n    function mapCategory(raw, cityForLookup) {\n      if (!raw) return null;\n      // if we have a city, prefer finding a category key within that city\n      if (cityForLookup) {\n        const found = findCategoryKeyForCity(cityForLookup, raw);\n        if (found) return found;\n      }\n      // otherwise search globally across cities for a matching category key\n      const target = normalizeString(raw);\n      for (const cityKey of Object.keys(eventsData)) {\n        const cats = Object.keys(eventsData[cityKey] || {});\n        for (const c of cats) {\n          if (normalizeString(c).startsWith(target) || normalizeString(c) === target) return c;\n        }\n      }\n      // fallback: return capitalized raw\n      return capitalizeFirst(raw);\n    }\n\n    // Determine mapped values (do not commit to state yet)\n    const mappedCity = parsedCity ? mapCity(parsedCity) : null;\n    const mappedCategory = parsedCategory ? mapCategory(parsedCategory, mappedCity || selectedCity) : null;\n\n    // detect explicit change request keywords in user's message (approximate)\n    const lowerRaw = (t || '').toLowerCase();\n    const explicitChange = /\\b(cambiar|cambio|cambia|nuevo|otra ciudad|otra categoria|otra categor√≠a|cambiar a)\\b/.test(lowerRaw);\n\n    // Apply parsed city if we don't have one yet or user explicitly asked to change\n    if (mappedCity) {\n      if (!selectedCity) {\n        setSelectedCity(mappedCity);\n      } else if (selectedCity !== mappedCity && explicitChange) {\n        setSelectedCity(mappedCity);\n      }\n    }\n\n    // Apply parsed category if we don't have one yet or user explicitly asked to change\n    if (mappedCategory) {\n      if (!selectedCategory) {\n        setSelectedCategory(mappedCategory);\n      } else if (selectedCategory !== mappedCategory && explicitChange) {\n        setSelectedCategory(mappedCategory);\n      }\n    }\n\n    // If after applying parsed tokens we have both city and category, perform immediate search\n    const finalCity = mappedCity || selectedCity;\n    const finalCategory = mappedCategory || selectedCategory;\n    if (finalCity && finalCategory) {\n      // ensure pagination cursor reset for this pair\n      const key = `${finalCity}|${finalCategory}`;\n      setPages(p => ({\n        ...p,\n        [key]: 0\n      }));\n      setSelectedCity(finalCity);\n      setSelectedCategory(finalCategory);\n      // Show first event immediately\n      botReply([{\n        text: `Perfecto ‚Äî buscando ${finalCategory} en ${finalCity}...`\n      }], 400);\n      // slight delay then show events (showEvents will simulate typing too)\n      setTimeout(() => showEvents(finalCity, finalCategory), 600);\n      return;\n    }\n\n    // If we only have category, ask for city\n    if ((mappedCategory || selectedCategory) && !(mappedCity || selectedCity)) {\n      const catToAsk = mappedCategory || selectedCategory;\n      botReply([{\n        text: `¬øEn qu√© ciudad quieres buscar ${catToAsk}? Por ejemplo Bogot√°, Medell√≠n, Cali o Bucaramanga.`\n      }], 500);\n      return;\n    }\n\n    // If we only have city, ask for category\n    if ((mappedCity || selectedCity) && !(mappedCategory || selectedCategory)) {\n      const cityToAsk = mappedCity || selectedCity;\n      botReply([{\n        text: `Genial ‚Äî ¬øqu√© categor√≠a te interesa en ${cityToAsk} (por ejemplo M√∫sica, Deportes, Culturales)?`\n      }], 500);\n      return;\n    }\n    if (intent.intent === 'list_cities') {\n      listCities();\n      return;\n    }\n    // greetings -> friendly human reply and open question\n    if (intent.intent === 'greeting') {\n      botReply([{\n        text: '¬°Hola! üòä ¬øEn qu√© ciudad te gustar√≠a buscar eventos o escribe \"buscar <texto>\" para una b√∫squeda r√°pida?'\n      }], 500);\n      return;\n    }\n    if (intent.intent === 'help') {\n      botReply([{\n        text: 'Puedo ayudarte a encontrar eventos. Prueba escribir: \"ver ciudades\", \"buscar <texto>\", el nombre de una ciudad (p.e. Bogot√°), \"ver m√°s\" o \"volver\" para reiniciar.'\n      }], 600);\n      return;\n    }\n    // user asked to see events -> start the city selection flow\n    if (intent.intent === 'list_events') {\n      listCities();\n      return;\n    }\n    if (intent.intent === 'restart') {\n      restart();\n      return;\n    }\n    if (intent.intent === 'show_more') {\n      selectOption('showMore');\n      return;\n    }\n    if (intent.intent === 'search_query') {\n      // show intermediate typing message\n      botReply([{\n        text: `Perfecto ‚Äî busco \"${intent.query}\"...`\n      }], 500);\n      // do a search across events and show first match (paged)\n      const q = intent.query.toLowerCase();\n      const results = [];\n      Object.keys(eventsData).forEach(city => {\n        Object.keys(eventsData[city]).forEach(cat => {\n          eventsData[city][cat].forEach(ev => {\n            const hay = `${ev.nombre} ${ev.artista} ${ev.lugar}`.toLowerCase();\n            if (hay.includes(q)) results.push({\n              city,\n              category: cat,\n              event: ev\n            });\n          });\n        });\n      });\n      if (results.length === 0) {\n        botReply([{\n          text: `No encontr√© nada para \"${intent.query}\". ¬øQuieres que muestre ciudades, intentes otra b√∫squeda o pidas ayuda? Escribe ver ciudades, buscar <texto> o ayuda.`\n        }], 800);\n      } else {\n        // show first found as event (and set pagination state for that city|category)\n        const r = results[0];\n        const city = capitalizeFirst(r.city);\n        const cat = capitalizeFirst(r.category);\n        // set pages index so showMore continues in that list\n        const key = `${city}|${cat}`;\n        setPages(p => ({\n          ...p,\n          [key]: 0\n        }));\n        botReply([{\n          text: `Resultado para \"${intent.query}\" en ${city} ‚Äî ${cat}:`\n        }, {\n          type: 'event',\n          payload: {\n            ...r.event,\n            fecha: formatDate(r.event.fecha)\n          }\n        }, {\n          text: 'Escribe \"ver m√°s\" para ver otro resultado, o \"volver\" para reiniciar.'\n        }], 700);\n      }\n      return;\n    }\n    if (intent.intent === 'search') {\n      // robust mapping: normalize keys (remove accents) and match\n      const wantedCity = normalizeString(intent.city);\n      const wantedCat = normalizeString(intent.category);\n      let cityKey = null;\n      for (const k of Object.keys(eventsData)) {\n        if (normalizeString(k).startsWith(wantedCity)) {\n          cityKey = k;\n          break;\n        }\n      }\n      let categoryKey = null;\n      if (cityKey) {\n        categoryKey = findCategoryKeyForCity(cityKey, intent.category) || Object.keys(eventsData[cityKey]).find(k => normalizeString(k).startsWith(wantedCat));\n      }\n      if (cityKey && categoryKey) {\n        // show first event and setup pagination for the proper key names\n        const catDisplay = categoryKey;\n        const pageKey = `${cityKey}|${catDisplay}`;\n        setPages(p => ({\n          ...p,\n          [pageKey]: 0\n        }));\n        setSelectedCity(cityKey);\n        setSelectedCategory(catDisplay);\n        showEvents(cityKey, catDisplay);\n      } else {\n        const cityPretty = capitalizeFirst(intent.city);\n        const catPretty = capitalizeFirst(intent.category);\n        botReply([{\n          text: `Lo siento ‚Äî no tengo toda la info exacta para ${cityPretty} y ${catPretty} ahora mismo. Escribe \"ver ciudades\" para ver opciones o intenta otra b√∫squeda.`\n        }], 600);\n      }\n      return;\n    }\n    if (intent.intent === 'choose_city') {\n      // normalize incoming city name\n      const rawCity = intent.city;\n      const city = capitalizeFirst(rawCity);\n\n      // If we already had a selected city, user is switching city mid-conversation\n      if (selectedCity && selectedCity !== city) {\n        // Attempt to preserve category filter if possible\n        if (selectedCategory) {\n          const validCat = findCategoryKeyForCity(city, selectedCategory);\n          if (validCat) {\n            // Reset pagination for new city+category then show first page\n            const key = `${city}|${validCat}`;\n            setPages(p => ({\n              ...p,\n              [key]: 0\n            }));\n            setSelectedCity(city);\n            setSelectedCategory(validCat);\n            botReply([{\n              text: `Perfecto ‚Äî ahora busco eventos en ${city}. Mantengo la categor√≠a ${validCat}.`\n            }], 600);\n            // show first item\n            showEvents(city, validCat);\n            return;\n          } else {\n            // category not available in new city: inform and offer alternatives\n            setSelectedCity(city);\n            setSelectedCategory(null);\n            const available = getCategoriesForCity(city);\n            const options = available.length ? available.concat(['Ver todos']) : ['M√∫sica', 'Culturales', 'Deportes', 'Conferencias'];\n            botReply([{\n              text: `Cambi√© a ${city}, pero no encontr√© la categor√≠a ${selectedCategory} all√≠.`\n            }, {\n              text: `Puedes elegir otra categor√≠a: ${options.join(', ')}. Escribe la categor√≠a que prefieras.`\n            }], 700);\n            return;\n          }\n        }\n        // No category to preserve ‚Äî just update city and ask what to do next\n        setSelectedCity(city);\n        setPendingCity(null);\n        botReply([{\n          text: `Perfecto ‚Äî ahora busco eventos en ${city}. ¬øQu√© categor√≠a te interesa? ${CATEGORIES.join(', ')}. Escribe la categor√≠a.`\n        }], 600);\n        return;\n      }\n\n      // default behavior (no selectedCity previously): show categories for chosen city\n      listCategories(city);\n      return;\n    }\n    if (intent.intent === 'choose_category') {\n      const rawCat = intent.category;\n      // find a valid category key in the currently selected city or pendingCity\n      const cityForLookup = selectedCity || pendingCity;\n      const validCat = cityForLookup ? findCategoryKeyForCity(cityForLookup, rawCat) : null;\n      if (validCat && cityForLookup) {\n        // reset pagination for this city|category\n        const key = `${cityForLookup}|${validCat}`;\n        setPages(p => ({\n          ...p,\n          [key]: 0\n        }));\n        setSelectedCategory(validCat);\n        setSelectedCity(cityForLookup);\n        showEvents(cityForLookup, validCat);\n      } else if (selectedCity && !validCat) {\n        // selected city exists but category not found there\n        const available = getCategoriesForCity(selectedCity);\n        const options = available.length ? available.concat(['Ver todos']) : ['M√∫sica', 'Culturales', 'Deportes', 'Conferencias'];\n        botReply([{\n          text: `No encontr√© la categor√≠a solicitada en ${selectedCity}. Puedes elegir otra categor√≠a: ${options.join(', ')}. Escribe la que prefieras.`\n        }], 600);\n      } else {\n        botReply([{\n          text: `Has pedido la categor√≠a ${capitalizeFirst(rawCat)}. Primero, selecciona una ciudad: ${CITIES.join(', ')}. Escribe la ciudad.`\n        }], 600);\n      }\n      return;\n    }\n    // fallback: use confidence to decide whether to clarify or perform a best-effort\n    if (confidence < 0.6) {\n      botReply([{\n        text: 'No estoy seguro de qu√© quieres decir ‚Äî ¬øQuieres que muestre ciudades, buscar por texto o ver ayuda? Escribe \"ver ciudades\", \"buscar <texto>\" o \"ayuda\".'\n      }], 600);\n    } else {\n      // try a friendly fallback that asks a clarifying question\n      botReply([{\n        text: '¬øQuieres que muestre ciudades, busque por texto o te muestre ayuda? Escribe ver ciudades, buscar <texto> o ayuda.'\n      }], 600);\n    }\n  }, [listCities, listCategories, pushMessage, CATEGORIES, CITIES, selectedCity, showEvents]);\n\n  // API requested: sendText, selectOption, resetConversation\n  const sendText = useCallback(text => {\n    handleText(text);\n  }, [handleText]);\n  const selectOption = useCallback((type, value) => {\n    // type: 'city'|'category'|'action'|'showMore'\n    if (type === 'city') {\n      selectCity(value);\n      return;\n    }\n    if (type === 'category') {\n      selectCategory(value);\n      return;\n    }\n    if (type === 'action' && (value || '').toLowerCase().includes('volver')) {\n      restart();\n      return;\n    }\n    if (type === 'showMore' || type === 'action' && (value || '').toLowerCase().includes('ver m')) {\n      // advance pagination for current selection\n      const city = selectedCity;\n      const category = selectedCategory;\n      if (!city || !category) {\n        botReply([{\n          text: 'Primero selecciona una ciudad y categor√≠a. Escribe \"ver ciudades\" para ver la lista de ciudades.'\n        }], 500);\n        return;\n      }\n      const key = `${city}|${category}`;\n      const cityData = eventsData[city] || {};\n      const list = cityData[category] || [];\n      const current = pages[key] || 0;\n      const next = current + PAGE_SIZE;\n      if (next >= list.length) {\n        botReply([{\n          text: `No hay m√°s eventos en ${category} para ${city}. Puedes escribir otra categor√≠a o ciudad, o \"volver\" para reiniciar.`\n        }], 600);\n        return;\n      }\n      // advance page index then show next PAGE_SIZE items\n      setPages(p => ({\n        ...p,\n        [key]: next\n      }));\n      // show events from next index\n      const slice = list.slice(next, next + PAGE_SIZE);\n      const items = [{\n        text: `Aqu√≠ tienes m√°s eventos en ${category} ¬∑ ${city}:`\n      }];\n      slice.forEach(ev => items.push({\n        type: 'event',\n        payload: {\n          ...ev,\n          fecha: formatDate(ev.fecha)\n        }\n      }));\n      items.push({\n        text: next + PAGE_SIZE < list.length ? 'Escribe \"ver m√°s\" para seguir viendo eventos.' : 'No quedan m√°s eventos en esta lista. Escribe otra categor√≠a o ciudad, o \"volver\".'\n      });\n      botReply(items, 700);\n      return;\n    }\n  }, [listCategories, pushMessage, showEvents, selectedCity, selectedCategory, pages, PAGE_SIZE, botReply]);\n\n  // helper functions local to hook\n  function capitalizeFirst(s) {\n    if (!s) return s;\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n  }\n  function normalizeString(s) {\n    if (!s) return '';\n    return s.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').trim();\n  }\n  function normalizeCityName(raw) {\n    if (!raw) return raw;\n    const r = raw.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    if (r.startsWith('medell')) return 'Medell√≠n';\n    if (r.startsWith('bogo')) return 'Bogot√°';\n    if (r.startsWith('cali')) return 'Cali';\n    if (r.startsWith('bucara')) return 'Bucaramanga';\n    if (r.startsWith('cart') || r.startsWith('cartag')) return 'Cartagena';\n    if (r.startsWith('barra') || r.startsWith('barran')) return 'Barranquilla';\n    return raw;\n  }\n\n  // find a category key in a city by comparing normalized strings (handles accents)\n  function findCategoryKeyForCity(city, catLike) {\n    if (!city || !catLike) return null;\n    const cityData = eventsData[city] || {};\n    const cats = Object.keys(cityData || {});\n    const target = catLike.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    for (const k of cats) {\n      const nk = k.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n      if (nk === target || nk.startsWith(target)) return k;\n    }\n    return null;\n  }\n  const selectCity = useCallback(city => {\n    if (!city) return;\n    setSelectedCity(city);\n    listCategories(city);\n  }, [listCategories]);\n  const selectCategory = useCallback(category => {\n    if (!category) return;\n    const cityToUse = selectedCity || pendingCity;\n    if (!cityToUse) {\n      pushMessage('ia', 'Primero, elige una ciudad para buscar.');\n      listCities();\n      return;\n    }\n    // clear pendingCity after consuming\n    setPendingCity(null);\n    showEvents(cityToUse, category);\n  }, [selectedCity, pendingCity, pushMessage, listCities, showEvents]);\n  const restart = useCallback(() => {\n    setState('idle');\n    setSelectedCity(null);\n    setSelectedCategory(null);\n    setMessages([{\n      id: genId('msg'),\n      sender: 'ia',\n      text: '¬°Hola de nuevo! Dime en qu√© ciudad buscas y preparo algunas opciones para ti.',\n      time: new Date().toISOString()\n    }]);\n  }, []);\n  const toggleOpen = useCallback(() => setOpen(o => !o), []);\n  return {\n    open,\n    state,\n    selectedCity,\n    selectedCategory,\n    messages,\n    isTyping,\n    // API methods requested\n    sendText: sendText,\n    selectOption: selectOption,\n    resetConversation: restart,\n    toggleOpen,\n    // legacy actions object for UI compatibility\n    actions: {\n      pushMessage,\n      handleText,\n      listCities,\n      listCategories,\n      selectCity,\n      selectCategory,\n      showEvents,\n      restart,\n      toggleOpen,\n      // expose newer API on actions for backward compatibility\n      selectOption,\n      sendText,\n      resetConversation: restart\n    }\n  };\n}\n_s(useChatBot, \"FJDbS/sQPybzCwr2pg9vQBXnAi8=\");\nexport default useChatBot;","map":{"version":3,"names":["useState","useCallback","scrapedEvents","inferCityFromEvent","e","url","toLowerCase","source","includes","inferCategoryFromEvent","text","tipo","nombre","titulo","descripcion","match","buildEventsIndex","arr","out","forEach","raw","city","category","ev","fecha","hora","lugar","ubicacion","summary","push","eventsData","genId","formatDate","parseIntent","sleep","getCities","Object","keys","sort","getCategoriesForCity","useChatBot","_s","PAGE_SIZE","open","setOpen","state","setState","selectedCity","setSelectedCity","selectedCategory","setSelectedCategory","messages","setMessages","id","sender","time","Date","toISOString","isTyping","setIsTyping","pages","setPages","pendingCity","setPendingCity","pushMessage","msg","m","botReply","items","delay","typingId","type","prev","filter","x","concat","map","it","listCities","cities","join","listCategories","cats","catsText","length","showEvents","key","cityData","list","p","start","slice","formatted","payload","guidance","handleText","trim","t","intent","confidence","parsedCity","parsedCategory","mapCity","byName","normalizeCityName","target","normalizeString","k","startsWith","capitalizeFirst","mapCategory","cityForLookup","found","findCategoryKeyForCity","cityKey","c","mappedCity","mappedCategory","lowerRaw","explicitChange","test","finalCity","finalCategory","setTimeout","catToAsk","cityToAsk","restart","selectOption","query","q","results","cat","hay","artista","event","r","wantedCity","wantedCat","categoryKey","find","catDisplay","pageKey","cityPretty","catPretty","rawCity","validCat","available","options","CATEGORIES","rawCat","CITIES","sendText","value","selectCity","selectCategory","current","next","s","charAt","toUpperCase","normalize","replace","catLike","nk","cityToUse","toggleOpen","o","resetConversation","actions"],"sources":["C:/Users/crist/OneDrive/Documents/Clonado fronted despliegue/prueba-desplegue/Proyecto-Integrador-fronted-main/src/components/ChatBotLogic.jsx"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport scrapedEvents from '../data/scraped_events.json';\r\n// Build an indexed structure eventsData[City][Category] => [events]\r\nfunction inferCityFromEvent(e) {\r\n  const url = (e.url || '').toLowerCase();\r\n  if ((e.source || '').toLowerCase().includes('pablotobon') || url.includes('medellin') || url.includes('medell')) return 'Medell√≠n';\r\n  if ((e.source || '').toLowerCase().includes('astor') || url.includes('bogota') || url.includes('bogot')) return 'Bogot√°';\r\n  if (url.includes('cali')) return 'Cali';\r\n  if (url.includes('bucaramanga')) return 'Bucaramanga';\r\n  if (url.includes('cartagena')) return 'Cartagena';\r\n  if (url.includes('barranquilla')) return 'Barranquilla';\r\n  // fallback unknown\r\n  return 'Bogot√°';\r\n}\r\n\r\nfunction inferCategoryFromEvent(e) {\r\n  const text = ((e.tipo || '') + ' ' + (e.nombre || e.titulo || '') + ' ' + (e.descripcion || '')).toLowerCase();\r\n  if (text.match(/m(usica|√∫sica)|conciert|band|orquesta|cantante|cantor/)) return 'M√∫sica';\r\n  if (text.match(/teatro|obra|drama|mon√≥logo|monolog/)) return 'Culturales';\r\n  if (text.match(/conferencia|congreso|foro|seminar|seminario|charla/)) return 'Conferencias';\r\n  if (text.match(/deporte|futbol|baloncesto|carrera|maraton|marat[o√≥]n/)) return 'Deportes';\r\n  // fallback: if tipo field suggests teatro vs musica\r\n  const tipo = (e.tipo || '').toLowerCase();\r\n  if (tipo.includes('mus') || tipo.includes('m√∫sica')) return 'M√∫sica';\r\n  if (tipo.includes('teatro')) return 'Culturales';\r\n  return 'Culturales';\r\n}\r\n\r\nfunction buildEventsIndex(arr) {\r\n  const out = {};\r\n  arr.forEach((raw) => {\r\n    const city = inferCityFromEvent(raw);\r\n    const category = inferCategoryFromEvent(raw);\r\n    const ev = {\r\n      nombre: raw.nombre || raw.titulo || '',\r\n      fecha: raw.fecha || null,\r\n      hora: raw.hora || null,\r\n      lugar: raw.lugar || raw.ubicacion || null,\r\n      descripcion: raw.descripcion || raw.summary || null,\r\n      url: raw.url || null,\r\n    };\r\n    out[city] = out[city] || {};\r\n    out[city][category] = out[city][category] || [];\r\n    out[city][category].push(ev);\r\n  });\r\n  return out;\r\n}\r\n\r\nconst eventsData = buildEventsIndex(scrapedEvents);\r\nimport { genId, formatDate, parseIntent, sleep } from '../utils/chatHelpers';\r\n\r\n// NOTE: Do not change selector names or external classes. This module is pure logic.\r\n\r\n// Derivar din√°micamente las ciudades y categor√≠as a partir de los datos scrapeados\r\nfunction getCities() {\r\n  return Object.keys(eventsData).sort();\r\n}\r\n\r\nfunction getCategoriesForCity(city) {\r\n  if (!city) return [];\r\n  return Object.keys(eventsData[city] || {}).sort();\r\n}\r\n\r\nexport function useChatBot() {\r\n  const PAGE_SIZE = 1; // configurable page size (mostrar X por acci√≥n)\r\n\r\n  const [open, setOpen] = useState(true);\r\n  const [state, setState] = useState('idle'); // idle | esperandoCiudad | esperandoCategoria | mostrandoEventos\r\n  const [selectedCity, setSelectedCity] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [messages, setMessages] = useState(() => [\r\n    { id: genId('msg'), sender: 'ia', text: '¬°Hola! Soy tu asistente de eventos ‚Äî encantado de ayudarte. ¬øEn qu√© ciudad te gustar√≠a buscar?', time: new Date().toISOString() },\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  // pagination index per city|category key\r\n  const [pages, setPages] = useState({});\r\n  // keep a pending city context when bot asked for category but selectedCity may not be set yet\r\n  const [pendingCity, setPendingCity] = useState(null);\r\n\r\n  const pushMessage = useCallback((sender, text) => {\r\n    const msg = { id: genId('msg'), sender, text, time: new Date().toISOString() };\r\n    setMessages((m) => [...m, msg]);\r\n    return msg;\r\n  }, []);\r\n\r\n  // Helper to simulate typing and then send one or multiple bot messages\r\n  const botReply = useCallback((items = [], delay = 600) => {\r\n    // items: array of message objects to push after typing\r\n    (async () => {\r\n      setIsTyping(true);\r\n      // push typing indicator (UI will render the animated dots)\r\n      const typingId = genId('typing');\r\n      setMessages((m) => [...m, { id: typingId, sender: 'ia', type: 'typing', text: 'Un momento, busco lo mejor para ti üòä' }]);\r\n      await sleep(delay);\r\n      // remove typing indicator and append items\r\n      setMessages((prev) => prev.filter((x) => x.id !== typingId).concat(items.map((it) => ({ id: genId('msg'), sender: 'ia', ...it, time: new Date().toISOString() }))));\r\n      setIsTyping(false);\r\n    })();\r\n  }, []);\r\n\r\n  const listCities = useCallback(() => {\r\n    setState('esperandoCiudad');\r\n    // send a text prompt listing cities (conversational, user must type the city name)\r\n    const cities = getCities();\r\n    botReply([\r\n      { text: `Selecciona una ciudad: ${cities.join(', ')}. Escribe el nombre de la ciudad para continuar.` },\r\n    ], 700);\r\n  }, [pushMessage]);\r\n\r\n  const listCategories = useCallback((city) => {\r\n    setState('esperandoCategoria');\r\n    setPendingCity(city);\r\n    const cats = getCategoriesForCity(city);\r\n    const catsText = cats.length ? cats.join(', ') : 'No hay categor√≠as predefinidas para esta ciudad; puedes escribir palabras como M√∫sica, Teatro, Deportes.';\r\n    botReply([\r\n      { text: `Has seleccionado ${city}. ¬øQu√© categor√≠a quieres ver? ${catsText}. Escribe la categor√≠a.` },\r\n    ], 700);\r\n  }, [pushMessage]);\r\n\r\n  const showEvents = useCallback((city, category) => {\r\n    setState('mostrandoEventos');\r\n    setSelectedCity(city);\r\n    setSelectedCategory(category);\r\n\r\n    const key = `${city}|${category}`;\r\n    const cityData = eventsData[city] || {};\r\n    const list = cityData[category] || [];\r\n\r\n    // initialize page index if needed\r\n    setPages((p) => ({ ...p, [key]: p[key] ? p[key] : 0 }));\r\n\r\n    if (list.length === 0) {\r\n      botReply([\r\n        { text: `Ups ‚Äî no encuentro ${category} en ${city} ahora mismo. Puedes escribir otra ciudad, otra categor√≠a, o \"volver\" para reiniciar.` },\r\n      ], 600);\r\n      return;\r\n    }\r\n\r\n    // show PAGE_SIZE items starting from pages[key]\r\n    const start = (pages[key] || 0);\r\n    const slice = list.slice(start, start + PAGE_SIZE);\r\n  const items = [];\r\n  // Use a neutral, non-counting intro to avoid revealing small totals.\r\n  items.push({ text: `Aqu√≠ tienes algunos eventos en ${category} ¬∑ ${city}:` });\r\n    slice.forEach((ev) => {\r\n      const formatted = { ...ev, fecha: formatDate(ev.fecha) };\r\n      items.push({ type: 'event', payload: formatted });\r\n    });\r\n    // guidance for next steps (conversational)\r\n    const guidance = [];\r\n    if (start + PAGE_SIZE < list.length) guidance.push('Si quieres ver m√°s, escribe \"ver m√°s\".');\r\n    guidance.push('Para cambiar de ciudad escribe el nombre de la ciudad. Escribe \"volver\" para volver al inicio.');\r\n    items.push({ text: guidance.join(' ') });\r\n    botReply(items, 800);\r\n  }, [pushMessage]);\r\n\r\n  const handleText = useCallback((text) => {\r\n    if (!text || !text.trim()) return;\r\n    const t = text.trim();\r\n    pushMessage('user', t);\r\n    // use parseIntent from helpers\r\n    const intent = parseIntent(t);\r\n\r\n    // If parser returned a confidence score, use it to decide clarifications\r\n    const confidence = (typeof intent.confidence === 'number') ? intent.confidence : 1.0;\r\n\r\n    // Merge parsed city/category into conversation state (do not overwrite existing unless explicit change requested)\r\n    const parsedCity = intent.city || null;\r\n    const parsedCategory = intent.category || null;\r\n\r\n    // helpers to map parsed tokens into canonical keys used by eventsData\r\n    function mapCity(raw) {\r\n      if (!raw) return null;\r\n      // prefer normalizeCityName if it maps\r\n      const byName = normalizeCityName(raw);\r\n      if (byName && eventsData[byName]) return byName;\r\n      const target = normalizeString(raw);\r\n      for (const k of Object.keys(eventsData)) {\r\n        if (normalizeString(k).startsWith(target)) return k;\r\n      }\r\n      return byName || capitalizeFirst(raw);\r\n    }\r\n\r\n    function mapCategory(raw, cityForLookup) {\r\n      if (!raw) return null;\r\n      // if we have a city, prefer finding a category key within that city\r\n      if (cityForLookup) {\r\n        const found = findCategoryKeyForCity(cityForLookup, raw);\r\n        if (found) return found;\r\n      }\r\n      // otherwise search globally across cities for a matching category key\r\n      const target = normalizeString(raw);\r\n      for (const cityKey of Object.keys(eventsData)) {\r\n        const cats = Object.keys(eventsData[cityKey] || {});\r\n        for (const c of cats) {\r\n          if (normalizeString(c).startsWith(target) || normalizeString(c) === target) return c;\r\n        }\r\n      }\r\n      // fallback: return capitalized raw\r\n      return capitalizeFirst(raw);\r\n    }\r\n\r\n    // Determine mapped values (do not commit to state yet)\r\n    const mappedCity = parsedCity ? mapCity(parsedCity) : null;\r\n    const mappedCategory = parsedCategory ? mapCategory(parsedCategory, mappedCity || selectedCity) : null;\r\n\r\n    // detect explicit change request keywords in user's message (approximate)\r\n    const lowerRaw = (t || '').toLowerCase();\r\n    const explicitChange = /\\b(cambiar|cambio|cambia|nuevo|otra ciudad|otra categoria|otra categor√≠a|cambiar a)\\b/.test(lowerRaw);\r\n\r\n    // Apply parsed city if we don't have one yet or user explicitly asked to change\r\n    if (mappedCity) {\r\n      if (!selectedCity) {\r\n        setSelectedCity(mappedCity);\r\n      } else if (selectedCity !== mappedCity && explicitChange) {\r\n        setSelectedCity(mappedCity);\r\n      }\r\n    }\r\n\r\n    // Apply parsed category if we don't have one yet or user explicitly asked to change\r\n    if (mappedCategory) {\r\n      if (!selectedCategory) {\r\n        setSelectedCategory(mappedCategory);\r\n      } else if (selectedCategory !== mappedCategory && explicitChange) {\r\n        setSelectedCategory(mappedCategory);\r\n      }\r\n    }\r\n\r\n    // If after applying parsed tokens we have both city and category, perform immediate search\r\n    const finalCity = mappedCity || selectedCity;\r\n    const finalCategory = mappedCategory || selectedCategory;\r\n    if (finalCity && finalCategory) {\r\n      // ensure pagination cursor reset for this pair\r\n      const key = `${finalCity}|${finalCategory}`;\r\n      setPages((p) => ({ ...p, [key]: 0 }));\r\n      setSelectedCity(finalCity);\r\n      setSelectedCategory(finalCategory);\r\n      // Show first event immediately\r\n      botReply([{ text: `Perfecto ‚Äî buscando ${finalCategory} en ${finalCity}...` }], 400);\r\n      // slight delay then show events (showEvents will simulate typing too)\r\n      setTimeout(() => showEvents(finalCity, finalCategory), 600);\r\n      return;\r\n    }\r\n\r\n    // If we only have category, ask for city\r\n    if ((mappedCategory || selectedCategory) && !(mappedCity || selectedCity)) {\r\n      const catToAsk = mappedCategory || selectedCategory;\r\n      botReply([{ text: `¬øEn qu√© ciudad quieres buscar ${catToAsk}? Por ejemplo Bogot√°, Medell√≠n, Cali o Bucaramanga.` }], 500);\r\n      return;\r\n    }\r\n\r\n    // If we only have city, ask for category\r\n    if ((mappedCity || selectedCity) && !(mappedCategory || selectedCategory)) {\r\n      const cityToAsk = mappedCity || selectedCity;\r\n      botReply([{ text: `Genial ‚Äî ¬øqu√© categor√≠a te interesa en ${cityToAsk} (por ejemplo M√∫sica, Deportes, Culturales)?` }], 500);\r\n      return;\r\n    }\r\n\r\n    if (intent.intent === 'list_cities') { listCities(); return; }\r\n    // greetings -> friendly human reply and open question\r\n    if (intent.intent === 'greeting') {\r\n      botReply([{ text: '¬°Hola! üòä ¬øEn qu√© ciudad te gustar√≠a buscar eventos o escribe \"buscar <texto>\" para una b√∫squeda r√°pida?' }], 500);\r\n      return;\r\n    }\r\n    if (intent.intent === 'help') {\r\n      botReply([\r\n        { text: 'Puedo ayudarte a encontrar eventos. Prueba escribir: \"ver ciudades\", \"buscar <texto>\", el nombre de una ciudad (p.e. Bogot√°), \"ver m√°s\" o \"volver\" para reiniciar.' }\r\n      ], 600);\r\n      return;\r\n    }\r\n    // user asked to see events -> start the city selection flow\r\n    if (intent.intent === 'list_events') { listCities(); return; }\r\n    if (intent.intent === 'restart') { restart(); return; }\r\n    if (intent.intent === 'show_more') { selectOption('showMore'); return; }\r\n\r\n    if (intent.intent === 'search_query') {\r\n      // show intermediate typing message\r\n      botReply([{ text: `Perfecto ‚Äî busco \"${intent.query}\"...` }], 500);\r\n      // do a search across events and show first match (paged)\r\n      const q = intent.query.toLowerCase();\r\n      const results = [];\r\n      Object.keys(eventsData).forEach((city) => {\r\n        Object.keys(eventsData[city]).forEach((cat) => {\r\n          eventsData[city][cat].forEach((ev) => {\r\n            const hay = `${ev.nombre} ${ev.artista} ${ev.lugar}`.toLowerCase();\r\n            if (hay.includes(q)) results.push({ city, category: cat, event: ev });\r\n          });\r\n        });\r\n      });\r\n      if (results.length === 0) {\r\n        botReply([{ text: `No encontr√© nada para \"${intent.query}\". ¬øQuieres que muestre ciudades, intentes otra b√∫squeda o pidas ayuda? Escribe ver ciudades, buscar <texto> o ayuda.` }], 800);\r\n      } else {\r\n        // show first found as event (and set pagination state for that city|category)\r\n        const r = results[0];\r\n        const city = capitalizeFirst(r.city);\r\n        const cat = capitalizeFirst(r.category);\r\n        // set pages index so showMore continues in that list\r\n        const key = `${city}|${cat}`;\r\n        setPages((p) => ({ ...p, [key]: 0 }));\r\n        botReply([{ text: `Resultado para \"${intent.query}\" en ${city} ‚Äî ${cat}:` }, { type: 'event', payload: { ...r.event, fecha: formatDate(r.event.fecha) } }, { text: 'Escribe \"ver m√°s\" para ver otro resultado, o \"volver\" para reiniciar.' }], 700);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (intent.intent === 'search') {\r\n      // robust mapping: normalize keys (remove accents) and match\r\n      const wantedCity = normalizeString(intent.city);\r\n      const wantedCat = normalizeString(intent.category);\r\n      let cityKey = null;\r\n      for (const k of Object.keys(eventsData)) {\r\n        if (normalizeString(k).startsWith(wantedCity)) { cityKey = k; break; }\r\n      }\r\n      let categoryKey = null;\r\n      if (cityKey) {\r\n        categoryKey = findCategoryKeyForCity(cityKey, intent.category) || Object.keys(eventsData[cityKey]).find(k => normalizeString(k).startsWith(wantedCat));\r\n      }\r\n      if (cityKey && categoryKey) {\r\n        // show first event and setup pagination for the proper key names\r\n        const catDisplay = categoryKey;\r\n        const pageKey = `${cityKey}|${catDisplay}`;\r\n        setPages((p) => ({ ...p, [pageKey]: 0 }));\r\n        setSelectedCity(cityKey);\r\n        setSelectedCategory(catDisplay);\r\n        showEvents(cityKey, catDisplay);\r\n      } else {\r\n        const cityPretty = capitalizeFirst(intent.city);\r\n        const catPretty = capitalizeFirst(intent.category);\r\n        botReply([{ text: `Lo siento ‚Äî no tengo toda la info exacta para ${cityPretty} y ${catPretty} ahora mismo. Escribe \"ver ciudades\" para ver opciones o intenta otra b√∫squeda.` }], 600);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (intent.intent === 'choose_city') {\r\n      // normalize incoming city name\r\n      const rawCity = intent.city;\r\n      const city = capitalizeFirst(rawCity);\r\n\r\n      // If we already had a selected city, user is switching city mid-conversation\r\n      if (selectedCity && selectedCity !== city) {\r\n        // Attempt to preserve category filter if possible\r\n        if (selectedCategory) {\r\n          const validCat = findCategoryKeyForCity(city, selectedCategory);\r\n          if (validCat) {\r\n            // Reset pagination for new city+category then show first page\r\n            const key = `${city}|${validCat}`;\r\n            setPages((p) => ({ ...p, [key]: 0 }));\r\n            setSelectedCity(city);\r\n            setSelectedCategory(validCat);\r\n            botReply([{ text: `Perfecto ‚Äî ahora busco eventos en ${city}. Mantengo la categor√≠a ${validCat}.` }], 600);\r\n            // show first item\r\n            showEvents(city, validCat);\r\n            return;\r\n          } else {\r\n            // category not available in new city: inform and offer alternatives\r\n            setSelectedCity(city);\r\n            setSelectedCategory(null);\r\n            const available = getCategoriesForCity(city);\r\n            const options = available.length ? available.concat(['Ver todos']) : ['M√∫sica', 'Culturales', 'Deportes', 'Conferencias'];\r\n            botReply([\r\n              { text: `Cambi√© a ${city}, pero no encontr√© la categor√≠a ${selectedCategory} all√≠.` },\r\n                { text: `Puedes elegir otra categor√≠a: ${options.join(', ')}. Escribe la categor√≠a que prefieras.` },\r\n            ], 700);\r\n            return;\r\n          }\r\n        }\r\n        // No category to preserve ‚Äî just update city and ask what to do next\r\n        setSelectedCity(city);\r\n        setPendingCity(null);\r\n        botReply([{ text: `Perfecto ‚Äî ahora busco eventos en ${city}. ¬øQu√© categor√≠a te interesa? ${CATEGORIES.join(', ')}. Escribe la categor√≠a.` }], 600);\r\n        return;\r\n      }\r\n\r\n      // default behavior (no selectedCity previously): show categories for chosen city\r\n      listCategories(city);\r\n      return;\r\n    }\r\n\r\n    if (intent.intent === 'choose_category') {\r\n      const rawCat = intent.category;\r\n      // find a valid category key in the currently selected city or pendingCity\r\n      const cityForLookup = selectedCity || pendingCity;\r\n      const validCat = cityForLookup ? findCategoryKeyForCity(cityForLookup, rawCat) : null;\r\n      if (validCat && cityForLookup) {\r\n        // reset pagination for this city|category\r\n        const key = `${cityForLookup}|${validCat}`;\r\n        setPages((p) => ({ ...p, [key]: 0 }));\r\n        setSelectedCategory(validCat);\r\n        setSelectedCity(cityForLookup);\r\n        showEvents(cityForLookup, validCat);\r\n      } else if (selectedCity && !validCat) {\r\n        // selected city exists but category not found there\r\n        const available = getCategoriesForCity(selectedCity);\r\n        const options = available.length ? available.concat(['Ver todos']) : ['M√∫sica', 'Culturales', 'Deportes', 'Conferencias'];\r\n        botReply([{ text: `No encontr√© la categor√≠a solicitada en ${selectedCity}. Puedes elegir otra categor√≠a: ${options.join(', ')}. Escribe la que prefieras.` }], 600);\r\n      } else {\r\n        botReply([{ text: `Has pedido la categor√≠a ${capitalizeFirst(rawCat)}. Primero, selecciona una ciudad: ${CITIES.join(', ')}. Escribe la ciudad.` }], 600);\r\n      }\r\n      return;\r\n    }\r\n    // fallback: use confidence to decide whether to clarify or perform a best-effort\r\n    if (confidence < 0.6) {\r\n      botReply([{ text: 'No estoy seguro de qu√© quieres decir ‚Äî ¬øQuieres que muestre ciudades, buscar por texto o ver ayuda? Escribe \"ver ciudades\", \"buscar <texto>\" o \"ayuda\".' }], 600);\r\n    } else {\r\n      // try a friendly fallback that asks a clarifying question\r\n      botReply([{ text: '¬øQuieres que muestre ciudades, busque por texto o te muestre ayuda? Escribe ver ciudades, buscar <texto> o ayuda.' }], 600);\r\n    }\r\n  }, [listCities, listCategories, pushMessage, CATEGORIES, CITIES, selectedCity, showEvents]);\r\n\r\n  \r\n\r\n  // API requested: sendText, selectOption, resetConversation\r\n  const sendText = useCallback((text) => {\r\n    handleText(text);\r\n  }, [handleText]);\r\n\r\n  const selectOption = useCallback((type, value) => {\r\n    // type: 'city'|'category'|'action'|'showMore'\r\n    if (type === 'city') { selectCity(value); return; }\r\n    if (type === 'category') { selectCategory(value); return; }\r\n    if (type === 'action' && (value||'').toLowerCase().includes('volver')) { restart(); return; }\r\n      if (type === 'showMore' || (type === 'action' && (value||'').toLowerCase().includes('ver m'))) {\r\n      // advance pagination for current selection\r\n      const city = selectedCity;\r\n      const category = selectedCategory;\r\n      if (!city || !category) { botReply([{ text: 'Primero selecciona una ciudad y categor√≠a. Escribe \"ver ciudades\" para ver la lista de ciudades.' }], 500); return; }\r\n      const key = `${city}|${category}`;\r\n      const cityData = eventsData[city] || {};\r\n      const list = cityData[category] || [];\r\n      const current = pages[key] || 0;\r\n      const next = current + PAGE_SIZE;\r\n      if (next >= list.length) {\r\n        botReply([{ text: `No hay m√°s eventos en ${category} para ${city}. Puedes escribir otra categor√≠a o ciudad, o \"volver\" para reiniciar.` }], 600);\r\n        return;\r\n      }\r\n      // advance page index then show next PAGE_SIZE items\r\n      setPages((p) => ({ ...p, [key]: next }));\r\n      // show events from next index\r\n      const slice = list.slice(next, next + PAGE_SIZE);\r\n      const items = [{ text: `Aqu√≠ tienes m√°s eventos en ${category} ¬∑ ${city}:` }];\r\n      slice.forEach((ev) => items.push({ type: 'event', payload: { ...ev, fecha: formatDate(ev.fecha) } }));\r\n      items.push({ text: (next + PAGE_SIZE < list.length) ? 'Escribe \"ver m√°s\" para seguir viendo eventos.' : 'No quedan m√°s eventos en esta lista. Escribe otra categor√≠a o ciudad, o \"volver\".' });\r\n      botReply(items, 700);\r\n      return;\r\n    }\r\n  }, [listCategories, pushMessage, showEvents, selectedCity, selectedCategory, pages, PAGE_SIZE, botReply]);\r\n\r\n  // helper functions local to hook\r\n  function capitalizeFirst(s) {\r\n    if (!s) return s;\r\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\r\n  }\r\n\r\n  function normalizeString(s) {\r\n    if (!s) return '';\r\n    return s.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').trim();\r\n  }\r\n\r\n  function normalizeCityName(raw) {\r\n    if (!raw) return raw;\r\n    const r = raw.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n  if (r.startsWith('medell')) return 'Medell√≠n';\r\n  if (r.startsWith('bogo')) return 'Bogot√°';\r\n  if (r.startsWith('cali')) return 'Cali';\r\n  if (r.startsWith('bucara')) return 'Bucaramanga';\r\n  if (r.startsWith('cart') || r.startsWith('cartag')) return 'Cartagena';\r\n  if (r.startsWith('barra') || r.startsWith('barran')) return 'Barranquilla';\r\n    return raw;\r\n  }\r\n\r\n  // find a category key in a city by comparing normalized strings (handles accents)\r\n  function findCategoryKeyForCity(city, catLike) {\r\n    if (!city || !catLike) return null;\r\n    const cityData = eventsData[city] || {};\r\n    const cats = Object.keys(cityData || {});\r\n    const target = catLike.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n    for (const k of cats) {\r\n      const nk = k.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      if (nk === target || nk.startsWith(target)) return k;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const selectCity = useCallback((city) => {\r\n    if (!city) return;\r\n    setSelectedCity(city);\r\n    listCategories(city);\r\n  }, [listCategories]);\r\n\r\n  const selectCategory = useCallback((category) => {\r\n    if (!category) return;\r\n    const cityToUse = selectedCity || pendingCity;\r\n    if (!cityToUse) {\r\n      pushMessage('ia', 'Primero, elige una ciudad para buscar.');\r\n      listCities();\r\n      return;\r\n    }\r\n    // clear pendingCity after consuming\r\n    setPendingCity(null);\r\n    showEvents(cityToUse, category);\r\n  }, [selectedCity, pendingCity, pushMessage, listCities, showEvents]);\r\n\r\n  const restart = useCallback(() => {\r\n    setState('idle');\r\n    setSelectedCity(null);\r\n    setSelectedCategory(null);\r\n    setMessages([{ id: genId('msg'), sender: 'ia', text: '¬°Hola de nuevo! Dime en qu√© ciudad buscas y preparo algunas opciones para ti.', time: new Date().toISOString() }]);\r\n  }, []);\r\n\r\n  const toggleOpen = useCallback(() => setOpen((o) => !o), []);\r\n\r\n  return {\r\n    open,\r\n    state,\r\n    selectedCity,\r\n    selectedCategory,\r\n    messages,\r\n    isTyping,\r\n    // API methods requested\r\n    sendText: sendText,\r\n    selectOption: selectOption,\r\n    resetConversation: restart,\r\n    toggleOpen,\r\n    // legacy actions object for UI compatibility\r\n    actions: {\r\n      pushMessage,\r\n      handleText,\r\n      listCities,\r\n      listCategories,\r\n      selectCity,\r\n      selectCategory,\r\n      showEvents,\r\n      restart,\r\n      toggleOpen,\r\n      // expose newer API on actions for backward compatibility\r\n      selectOption,\r\n      sendText,\r\n      resetConversation: restart,\r\n    },\r\n  };\r\n}\r\n\r\nexport default useChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}