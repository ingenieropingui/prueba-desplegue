{"ast":null,"code":"// Utilities for chatbot logic. Keep pure functions and no DOM side-effects.\nexport function formatDate(dateStr) {\n  // Accepts dates already in DD/MM/YYYY or ISO; returns DD/MM/YYYY\n  if (!dateStr) return '';\n  // If already in DD/MM/YYYY\n  if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) return dateStr;\n  const d = new Date(dateStr);\n  if (isNaN(d)) return dateStr;\n  const dd = String(d.getDate()).padStart(2, '0');\n  const mm = String(d.getMonth() + 1).padStart(2, '0');\n  const yyyy = d.getFullYear();\n  return `${dd}/${mm}/${yyyy}`;\n}\nexport function genId(prefix = 'id') {\n  // Simple unique id generator, safe to use locally\n  return `${prefix}_${Date.now().toString(36)}_${Math.random().toString(36).slice(2, 8)}`;\n}\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// parseIntent: simple rule-based parser returning city, category, action, query\nexport function parseIntent(text) {\n  if (!text) return {\n    intent: 'unknown',\n    confidence: 0\n  };\n\n  // Normalization pipeline: lowercase, NFD normalize, remove diacritics, replace corrupt/non-letter chars with spaces,\n  // collapse spaces and punctuation.\n  const normalize = s => {\n    if (!s) return '';\n    // replace common corrupted characters (boxes) with space, keep letters/numbers and spaces\n    let t = String(s).trim().toLowerCase();\n    // NFD + remove accents\n    t = t.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    // replace non-letter/digit/space with space (removes weird boxes, control chars, punctuation)\n    t = t.replace(/[^a-z0-9\\sñüáéíóú-]/g, ' ');\n    // collapse multiple spaces and dashes\n    t = t.replace(/[\\-\\_]+/g, ' ');\n    t = t.replace(/\\s+/g, ' ').trim();\n    return t;\n  };\n  const raw = normalize(text);\n\n  // Known cities and categories (keep aligned with events data)\n  const CITIES = ['bogota', 'medellin', 'cali', 'bucaramanga', 'cartagena', 'barranquilla'];\n  const CATEGORY_MAP = {\n    musica: ['musica', 'musical', 'concierto', 'pop', 'rock', 'jazz', 'indie'],\n    deportes: ['deporte', 'deportes', 'partido', 'maraton', 'ciclismo', 'futbol', 'futbol'],\n    culturales: ['cultural', 'cultura', 'teatro', 'exposicion', 'exposiciones', 'arte', 'museo'],\n    conferencias: ['conferencia', 'conferencias', 'foro', 'seminario', 'talk', 'charla']\n  };\n\n  // Levenshtein distance for fuzzy matching small typos\n  function levenshtein(a, b) {\n    if (!a || !b) return Infinity;\n    const m = a.length,\n      n = b.length;\n    const dp = Array.from({\n      length: m + 1\n    }, () => new Array(n + 1).fill(0));\n    for (let i = 0; i <= m; i++) dp[i][0] = i;\n    for (let j = 0; j <= n; j++) dp[0][j] = j;\n    for (let i = 1; i <= m; i++) {\n      for (let j = 1; j <= n; j++) {\n        dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + (a[i - 1] === b[j - 1] ? 0 : 1));\n      }\n    }\n    return dp[m][n];\n  }\n\n  // helper fuzzy contains: checks tokens against target allowing small edits\n  function fuzzyContains(haystack, needle) {\n    if (!haystack || !needle) return false;\n    if (haystack.includes(needle)) return true;\n    const tokens = haystack.split(/\\s+/);\n    for (const t of tokens) if (levenshtein(t, needle) <= 1) return true;\n    return false;\n  }\n\n  // Intent detectors (ordered by priority)\n  // greetings\n  if (/^\\b(hola|holaa|buenos dias|buenas dias|buenas tardes|buenas noches|que tal|qué tal|hey|buenas)\\b/.test(raw)) {\n    return {\n      intent: 'greeting',\n      detected: 'greeting',\n      confidence: 0.95\n    };\n  }\n\n  // ver ciudades\n  if (/\\b(ver ciudades|mostrar ciudades|ciudades|ver la lista de ciudades)\\b/.test(raw)) {\n    return {\n      intent: 'list_cities',\n      detected: 'ver_ciudades',\n      confidence: 0.9\n    };\n  }\n\n  // ayuda\n  if (/\\b(ayuda|que puedo hacer|qué puedo hacer|help)\\b/.test(raw)) {\n    return {\n      intent: 'help',\n      detected: 'ayuda',\n      confidence: 0.9\n    };\n  }\n\n  // ver mas / pagination\n  if (/\\b(ver mas|ver mas|ver más|mostrar siguiente|siguiente|otro resultado|otro)\\b/.test(raw)) {\n    return {\n      intent: 'show_more',\n      detected: 'ver_mas',\n      confidence: 0.9\n    };\n  }\n\n  // volver al inicio\n  if (/\\b(volver al inicio|volver|inicio|empezar|reiniciar)\\b/.test(raw)) {\n    return {\n      intent: 'restart',\n      detected: 'volver_inicio',\n      confidence: 0.9\n    };\n  }\n\n  // explicit 'ver <ciudad>' when user just names a city or writes 'ver bogota'\n  for (const c of CITIES) {\n    if (raw === c || raw === `ver ${c}` || fuzzyContains(raw, c)) {\n      // treat as choose_city\n      return {\n        intent: 'choose_city',\n        detected: 'ver_ciudad',\n        city: capitalize(c),\n        confidence: 0.9\n      };\n    }\n  }\n\n  // explicit search patterns: buscar <term>, busca <term>, quiero ver <term>, quiero <term>\n  const searchMatch = raw.match(/^(?:buscar|busca|buscarme|buscame|buscar por|quiero ver|quiero|quiero buscar|muéstrame|muestrame|mostrar|ver|dime)\\s+(.+)$/);\n  if (searchMatch) {\n    const rest = searchMatch[1].trim();\n    // try to extract city or category inside the rest using 'en <city>' or 'en <city> de <category>'\n    let city = null,\n      category = null,\n      query = rest;\n    const enMatch = rest.match(/(.+)\\s+en\\s+([a-z\\s]+)$/);\n    if (enMatch) {\n      query = enMatch[1].trim();\n      const candidate = enMatch[2].trim();\n      for (const c of CITIES) if (fuzzyContains(candidate, c)) {\n        city = capitalize(c);\n      }\n    }\n    // detect category keywords inside query\n    for (const [catKey, variants] of Object.entries(CATEGORY_MAP)) {\n      for (const v of variants) {\n        if (fuzzyContains(query, v)) {\n          category = catKey;\n          break;\n        }\n      }\n      if (category) break;\n    }\n    // if we detected city+category -> search (category+city)\n    if (city && category) return {\n      intent: 'search',\n      detected: 'buscar',\n      city,\n      category,\n      query,\n      confidence: 0.95\n    };\n    // if just a free text search, map to search_query\n    return {\n      intent: 'search_query',\n      detected: 'buscar',\n      query: rest,\n      confidence: 0.9\n    };\n  }\n\n  // detect category + city patterns like 'musica en bogota' or 'musica bogota'\n  // look for category tokens first\n  let foundCategory = null;\n  for (const [catKey, variants] of Object.entries(CATEGORY_MAP)) {\n    for (const v of variants) {\n      if (fuzzyContains(raw, v)) {\n        foundCategory = catKey;\n        break;\n      }\n    }\n    if (foundCategory) break;\n  }\n  let foundCity = null;\n  for (const c of CITIES) if (fuzzyContains(raw, c)) {\n    foundCity = c;\n    break;\n  }\n  if (foundCategory && foundCity) {\n    return {\n      intent: 'search',\n      detected: 'buscar',\n      city: capitalize(foundCity),\n      category: foundCategory,\n      confidence: 0.95\n    };\n  }\n\n  // if the user wrote only a city token somewhere, treat as choose_city (e.g. 'Bogota')\n  if (foundCity && !foundCategory) return {\n    intent: 'choose_city',\n    detected: 'ver_ciudad',\n    city: capitalize(foundCity),\n    confidence: 0.85\n  };\n  if (foundCategory && !foundCity) return {\n    intent: 'choose_category',\n    detected: 'categoria',\n    category: foundCategory,\n    confidence: 0.85\n  };\n\n  // if the user typed one-word commands like 'ciudades'\n  if (raw === 'ciudades') return {\n    intent: 'list_cities',\n    detected: 'ver_ciudades',\n    confidence: 0.9\n  };\n\n  // fallback: low-confidence unknown; log it for later inspection and return unknown with low confidence\n  try {\n    // lightweight logging of unrecognized inputs for telemetry during dev\n    // Keep as console.warn to avoid breaking environments; these can be collected if needed.\n    console.warn('chat-intent-unrecognized', {\n      text: text,\n      normalized: raw\n    });\n  } catch (e) {\n    // swallow\n  }\n  return {\n    intent: 'unknown',\n    detected: 'unknown',\n    confidence: 0.3\n  };\n}\n\n// helper to capitalize city display\nfunction capitalize(s) {\n  if (!s) return s;\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n}","map":{"version":3,"names":["formatDate","dateStr","test","d","Date","isNaN","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","genId","prefix","now","toString","Math","random","slice","sleep","ms","Promise","resolve","setTimeout","parseIntent","text","intent","confidence","normalize","s","t","trim","toLowerCase","replace","raw","CITIES","CATEGORY_MAP","musica","deportes","culturales","conferencias","levenshtein","a","b","Infinity","m","length","n","dp","Array","from","fill","i","j","min","fuzzyContains","haystack","needle","includes","tokens","split","detected","c","city","capitalize","searchMatch","match","rest","category","query","enMatch","candidate","catKey","variants","Object","entries","v","foundCategory","foundCity","console","warn","normalized","e","charAt","toUpperCase"],"sources":["C:/Users/crist/OneDrive/Documents/Clonado fronted despliegue/prueba-desplegue/Proyecto-Integrador-fronted-main/src/utils/chatHelpers.js"],"sourcesContent":["// Utilities for chatbot logic. Keep pure functions and no DOM side-effects.\r\nexport function formatDate(dateStr) {\r\n  // Accepts dates already in DD/MM/YYYY or ISO; returns DD/MM/YYYY\r\n  if (!dateStr) return '';\r\n  // If already in DD/MM/YYYY\r\n  if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) return dateStr;\r\n  const d = new Date(dateStr);\r\n  if (isNaN(d)) return dateStr;\r\n  const dd = String(d.getDate()).padStart(2, '0');\r\n  const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n  const yyyy = d.getFullYear();\r\n  return `${dd}/${mm}/${yyyy}`;\r\n}\r\n\r\nexport function genId(prefix = 'id') {\r\n  // Simple unique id generator, safe to use locally\r\n  return `${prefix}_${Date.now().toString(36)}_${Math.random().toString(36).slice(2,8)}`;\r\n}\r\n\r\nexport function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\n// parseIntent: simple rule-based parser returning city, category, action, query\r\nexport function parseIntent(text) {\r\n  if (!text) return { intent: 'unknown', confidence: 0 };\r\n\r\n  // Normalization pipeline: lowercase, NFD normalize, remove diacritics, replace corrupt/non-letter chars with spaces,\r\n  // collapse spaces and punctuation.\r\n  const normalize = (s) => {\r\n    if (!s) return '';\r\n    // replace common corrupted characters (boxes) with space, keep letters/numbers and spaces\r\n    let t = String(s).trim().toLowerCase();\r\n    // NFD + remove accents\r\n    t = t.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n    // replace non-letter/digit/space with space (removes weird boxes, control chars, punctuation)\r\n    t = t.replace(/[^a-z0-9\\sñüáéíóú-]/g, ' ');\r\n    // collapse multiple spaces and dashes\r\n    t = t.replace(/[\\-\\_]+/g, ' ');\r\n    t = t.replace(/\\s+/g, ' ').trim();\r\n    return t;\r\n  };\r\n\r\n  const raw = normalize(text);\r\n\r\n  // Known cities and categories (keep aligned with events data)\r\n  const CITIES = ['bogota', 'medellin', 'cali', 'bucaramanga', 'cartagena', 'barranquilla'];\r\n  const CATEGORY_MAP = {\r\n    musica: ['musica', 'musical', 'concierto', 'pop', 'rock', 'jazz', 'indie'],\r\n    deportes: ['deporte', 'deportes', 'partido', 'maraton', 'ciclismo', 'futbol', 'futbol'],\r\n    culturales: ['cultural', 'cultura', 'teatro', 'exposicion', 'exposiciones', 'arte', 'museo'],\r\n    conferencias: ['conferencia', 'conferencias', 'foro', 'seminario', 'talk', 'charla']\r\n  };\r\n\r\n  // Levenshtein distance for fuzzy matching small typos\r\n  function levenshtein(a, b) {\r\n    if (!a || !b) return Infinity;\r\n    const m = a.length, n = b.length;\r\n    const dp = Array.from({ length: m + 1 }, () => new Array(n + 1).fill(0));\r\n    for (let i = 0; i <= m; i++) dp[i][0] = i;\r\n    for (let j = 0; j <= n; j++) dp[0][j] = j;\r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        dp[i][j] = Math.min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + (a[i-1] === b[j-1] ? 0 : 1));\r\n      }\r\n    }\r\n    return dp[m][n];\r\n  }\r\n\r\n  // helper fuzzy contains: checks tokens against target allowing small edits\r\n  function fuzzyContains(haystack, needle) {\r\n    if (!haystack || !needle) return false;\r\n    if (haystack.includes(needle)) return true;\r\n    const tokens = haystack.split(/\\s+/);\r\n    for (const t of tokens) if (levenshtein(t, needle) <= 1) return true;\r\n    return false;\r\n  }\r\n\r\n  // Intent detectors (ordered by priority)\r\n  // greetings\r\n  if (/^\\b(hola|holaa|buenos dias|buenas dias|buenas tardes|buenas noches|que tal|qué tal|hey|buenas)\\b/.test(raw)) {\r\n    return { intent: 'greeting', detected: 'greeting', confidence: 0.95 };\r\n  }\r\n\r\n  // ver ciudades\r\n  if (/\\b(ver ciudades|mostrar ciudades|ciudades|ver la lista de ciudades)\\b/.test(raw)) {\r\n    return { intent: 'list_cities', detected: 'ver_ciudades', confidence: 0.9 };\r\n  }\r\n\r\n  // ayuda\r\n  if (/\\b(ayuda|que puedo hacer|qué puedo hacer|help)\\b/.test(raw)) {\r\n    return { intent: 'help', detected: 'ayuda', confidence: 0.9 };\r\n  }\r\n\r\n  // ver mas / pagination\r\n  if (/\\b(ver mas|ver mas|ver más|mostrar siguiente|siguiente|otro resultado|otro)\\b/.test(raw)) {\r\n    return { intent: 'show_more', detected: 'ver_mas', confidence: 0.9 };\r\n  }\r\n\r\n  // volver al inicio\r\n  if (/\\b(volver al inicio|volver|inicio|empezar|reiniciar)\\b/.test(raw)) {\r\n    return { intent: 'restart', detected: 'volver_inicio', confidence: 0.9 };\r\n  }\r\n\r\n  // explicit 'ver <ciudad>' when user just names a city or writes 'ver bogota'\r\n  for (const c of CITIES) {\r\n    if (raw === c || raw === `ver ${c}` || fuzzyContains(raw, c)) {\r\n      // treat as choose_city\r\n      return { intent: 'choose_city', detected: 'ver_ciudad', city: capitalize(c), confidence: 0.9 };\r\n    }\r\n  }\r\n\r\n  // explicit search patterns: buscar <term>, busca <term>, quiero ver <term>, quiero <term>\r\n  const searchMatch = raw.match(/^(?:buscar|busca|buscarme|buscame|buscar por|quiero ver|quiero|quiero buscar|muéstrame|muestrame|mostrar|ver|dime)\\s+(.+)$/);\r\n  if (searchMatch) {\r\n    const rest = searchMatch[1].trim();\r\n    // try to extract city or category inside the rest using 'en <city>' or 'en <city> de <category>'\r\n    let city = null, category = null, query = rest;\r\n    const enMatch = rest.match(/(.+)\\s+en\\s+([a-z\\s]+)$/);\r\n    if (enMatch) {\r\n      query = enMatch[1].trim();\r\n      const candidate = enMatch[2].trim();\r\n      for (const c of CITIES) if (fuzzyContains(candidate, c)) { city = capitalize(c); }\r\n    }\r\n    // detect category keywords inside query\r\n    for (const [catKey, variants] of Object.entries(CATEGORY_MAP)) {\r\n      for (const v of variants) {\r\n        if (fuzzyContains(query, v)) { category = catKey; break; }\r\n      }\r\n      if (category) break;\r\n    }\r\n    // if we detected city+category -> search (category+city)\r\n    if (city && category) return { intent: 'search', detected: 'buscar', city, category, query, confidence: 0.95 };\r\n    // if just a free text search, map to search_query\r\n    return { intent: 'search_query', detected: 'buscar', query: rest, confidence: 0.9 };\r\n  }\r\n\r\n  // detect category + city patterns like 'musica en bogota' or 'musica bogota'\r\n  // look for category tokens first\r\n  let foundCategory = null;\r\n  for (const [catKey, variants] of Object.entries(CATEGORY_MAP)) {\r\n    for (const v of variants) {\r\n      if (fuzzyContains(raw, v)) { foundCategory = catKey; break; }\r\n    }\r\n    if (foundCategory) break;\r\n  }\r\n  let foundCity = null;\r\n  for (const c of CITIES) if (fuzzyContains(raw, c)) { foundCity = c; break; }\r\n  if (foundCategory && foundCity) {\r\n    return { intent: 'search', detected: 'buscar', city: capitalize(foundCity), category: foundCategory, confidence: 0.95 };\r\n  }\r\n\r\n  // if the user wrote only a city token somewhere, treat as choose_city (e.g. 'Bogota')\r\n  if (foundCity && !foundCategory) return { intent: 'choose_city', detected: 'ver_ciudad', city: capitalize(foundCity), confidence: 0.85 };\r\n  if (foundCategory && !foundCity) return { intent: 'choose_category', detected: 'categoria', category: foundCategory, confidence: 0.85 };\r\n\r\n  // if the user typed one-word commands like 'ciudades'\r\n  if (raw === 'ciudades') return { intent: 'list_cities', detected: 'ver_ciudades', confidence: 0.9 };\r\n\r\n  // fallback: low-confidence unknown; log it for later inspection and return unknown with low confidence\r\n  try {\r\n    // lightweight logging of unrecognized inputs for telemetry during dev\r\n    // Keep as console.warn to avoid breaking environments; these can be collected if needed.\r\n    console.warn('chat-intent-unrecognized', { text: text, normalized: raw });\r\n  } catch (e) {\r\n    // swallow\r\n  }\r\n  return { intent: 'unknown', detected: 'unknown', confidence: 0.3 };\r\n}\r\n\r\n// helper to capitalize city display\r\nfunction capitalize(s) {\r\n  if (!s) return s;\r\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}