{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport eventsData from '../data/events';\nimport { genId, formatDate, parseIntent, sleep } from '../utils/chatHelpers';\n\n// NOTE: Do not change selector names or external classes. This module is pure logic.\n\nconst CITIES = ['Cali', 'MedellÃ­n', 'BogotÃ¡', 'Bucaramanga', 'Cartagena', 'Barranquilla'];\nconst CATEGORIES = ['MÃºsica', 'Deportes', 'Culturales', 'Conferencias'];\nexport function useChatBot() {\n  _s();\n  const PAGE_SIZE = 1; // configurable page size (mostrar X por acciÃ³n)\n\n  const [open, setOpen] = useState(true);\n  const [state, setState] = useState('idle'); // idle | esperandoCiudad | esperandoCategoria | mostrandoEventos\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [messages, setMessages] = useState(() => [{\n    id: genId('msg'),\n    sender: 'ia',\n    text: 'Â¡Hola! Soy tu asistente de eventos â€” encantado de ayudarte. Â¿En quÃ© ciudad te gustarÃ­a buscar?',\n    time: new Date().toISOString()\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // pagination index per city|category key\n  const [pages, setPages] = useState({});\n  // keep a pending city context when bot asked for category but selectedCity may not be set yet\n  const [pendingCity, setPendingCity] = useState(null);\n  const pushMessage = useCallback((sender, text) => {\n    const msg = {\n      id: genId('msg'),\n      sender,\n      text,\n      time: new Date().toISOString()\n    };\n    setMessages(m => [...m, msg]);\n    return msg;\n  }, []);\n\n  // Helper to simulate typing and then send one or multiple bot messages\n  const botReply = useCallback((items = [], delay = 600) => {\n    // items: array of message objects to push after typing\n    (async () => {\n      setIsTyping(true);\n      // push typing indicator (UI will render the animated dots)\n      const typingId = genId('typing');\n      setMessages(m => [...m, {\n        id: typingId,\n        sender: 'ia',\n        type: 'typing',\n        text: 'Un momento, busco lo mejor para ti ğŸ˜Š'\n      }]);\n      await sleep(delay);\n      // remove typing indicator and append items\n      setMessages(prev => prev.filter(x => x.id !== typingId).concat(items.map(it => ({\n        id: genId('msg'),\n        sender: 'ia',\n        ...it,\n        time: new Date().toISOString()\n      }))));\n      setIsTyping(false);\n    })();\n  }, []);\n  const listCities = useCallback(() => {\n    setState('esperandoCiudad');\n    // send a text prompt listing cities (conversational, user must type the city name)\n    botReply([{\n      text: `Selecciona una ciudad: ${CITIES.join(', ')}. Escribe el nombre de la ciudad para continuar.`\n    }], 700);\n  }, [pushMessage]);\n  const listCategories = useCallback(city => {\n    setState('esperandoCategoria');\n    setPendingCity(city);\n    botReply([{\n      text: `Has seleccionado ${city}. Â¿QuÃ© categorÃ­a quieres ver? ${CATEGORIES.join(', ')}. Escribe la categorÃ­a.`\n    }], 700);\n  }, [pushMessage]);\n  const showEvents = useCallback((city, category) => {\n    setState('mostrandoEventos');\n    setSelectedCity(city);\n    setSelectedCategory(category);\n    const key = `${city}|${category}`;\n    const cityData = eventsData[city] || {};\n    const list = cityData[category] || [];\n\n    // initialize page index if needed\n    setPages(p => ({\n      ...p,\n      [key]: p[key] ? p[key] : 0\n    }));\n    if (list.length === 0) {\n      botReply([{\n        text: `Ups â€” no encuentro ${category} en ${city} ahora mismo. Puedes escribir otra ciudad, otra categorÃ­a, o \"volver\" para reiniciar.`\n      }], 600);\n      return;\n    }\n\n    // show PAGE_SIZE items starting from pages[key]\n    const start = pages[key] || 0;\n    const slice = list.slice(start, start + PAGE_SIZE);\n    const items = [];\n    // Use a neutral, non-counting intro to avoid revealing small totals.\n    items.push({\n      text: `AquÃ­ tienes algunos eventos en ${category} Â· ${city}:`\n    });\n    slice.forEach(ev => {\n      const formatted = {\n        ...ev,\n        fecha: formatDate(ev.fecha)\n      };\n      items.push({\n        type: 'event',\n        payload: formatted\n      });\n    });\n    // guidance for next steps (conversational)\n    const guidance = [];\n    if (start + PAGE_SIZE < list.length) guidance.push('Si quieres ver mÃ¡s, escribe \"ver mÃ¡s\".');\n    guidance.push('Para cambiar de ciudad escribe el nombre de la ciudad. Escribe \"volver\" para volver al inicio.');\n    items.push({\n      text: guidance.join(' ')\n    });\n    botReply(items, 800);\n  }, [pushMessage]);\n  const handleText = useCallback(text => {\n    if (!text || !text.trim()) return;\n    const t = text.trim();\n    pushMessage('user', t);\n    // use parseIntent from helpers\n    const intent = parseIntent(t);\n\n    // If parser returned a confidence score, use it to decide clarifications\n    const confidence = typeof intent.confidence === 'number' ? intent.confidence : 1.0;\n\n    // Merge parsed city/category into conversation state (do not overwrite existing unless explicit change requested)\n    const parsedCity = intent.city || null;\n    const parsedCategory = intent.category || null;\n\n    // helpers to map parsed tokens into canonical keys used by eventsData\n    function mapCity(raw) {\n      if (!raw) return null;\n      // prefer normalizeCityName if it maps\n      const byName = normalizeCityName(raw);\n      if (byName && eventsData[byName]) return byName;\n      const target = normalizeString(raw);\n      for (const k of Object.keys(eventsData)) {\n        if (normalizeString(k).startsWith(target)) return k;\n      }\n      return byName || capitalizeFirst(raw);\n    }\n    function mapCategory(raw, cityForLookup) {\n      if (!raw) return null;\n      // if we have a city, prefer finding a category key within that city\n      if (cityForLookup) {\n        const found = findCategoryKeyForCity(cityForLookup, raw);\n        if (found) return found;\n      }\n      // otherwise search globally across cities for a matching category key\n      const target = normalizeString(raw);\n      for (const cityKey of Object.keys(eventsData)) {\n        const cats = Object.keys(eventsData[cityKey] || {});\n        for (const c of cats) {\n          if (normalizeString(c).startsWith(target) || normalizeString(c) === target) return c;\n        }\n      }\n      // fallback: return capitalized raw\n      return capitalizeFirst(raw);\n    }\n\n    // Determine mapped values (do not commit to state yet)\n    const mappedCity = parsedCity ? mapCity(parsedCity) : null;\n    const mappedCategory = parsedCategory ? mapCategory(parsedCategory, mappedCity || selectedCity) : null;\n\n    // detect explicit change request keywords in user's message (approximate)\n    const lowerRaw = (t || '').toLowerCase();\n    const explicitChange = /\\b(cambiar|cambio|cambia|nuevo|otra ciudad|otra categoria|otra categorÃ­a|cambiar a)\\b/.test(lowerRaw);\n\n    // Apply parsed city if we don't have one yet or user explicitly asked to change\n    if (mappedCity) {\n      if (!selectedCity) {\n        setSelectedCity(mappedCity);\n      } else if (selectedCity !== mappedCity && explicitChange) {\n        setSelectedCity(mappedCity);\n      }\n    }\n\n    // Apply parsed category if we don't have one yet or user explicitly asked to change\n    if (mappedCategory) {\n      if (!selectedCategory) {\n        setSelectedCategory(mappedCategory);\n      } else if (selectedCategory !== mappedCategory && explicitChange) {\n        setSelectedCategory(mappedCategory);\n      }\n    }\n\n    // If after applying parsed tokens we have both city and category, perform immediate search\n    const finalCity = mappedCity || selectedCity;\n    const finalCategory = mappedCategory || selectedCategory;\n    if (finalCity && finalCategory) {\n      // ensure pagination cursor reset for this pair\n      const key = `${finalCity}|${finalCategory}`;\n      setPages(p => ({\n        ...p,\n        [key]: 0\n      }));\n      setSelectedCity(finalCity);\n      setSelectedCategory(finalCategory);\n      // Show first event immediately\n      botReply([{\n        text: `Perfecto â€” buscando ${finalCategory} en ${finalCity}...`\n      }], 400);\n      // slight delay then show events (showEvents will simulate typing too)\n      setTimeout(() => showEvents(finalCity, finalCategory), 600);\n      return;\n    }\n\n    // If we only have category, ask for city\n    if ((mappedCategory || selectedCategory) && !(mappedCity || selectedCity)) {\n      const catToAsk = mappedCategory || selectedCategory;\n      botReply([{\n        text: `Â¿En quÃ© ciudad quieres buscar ${catToAsk}? Por ejemplo BogotÃ¡, MedellÃ­n, Cali o Bucaramanga.`\n      }], 500);\n      return;\n    }\n\n    // If we only have city, ask for category\n    if ((mappedCity || selectedCity) && !(mappedCategory || selectedCategory)) {\n      const cityToAsk = mappedCity || selectedCity;\n      botReply([{\n        text: `Genial â€” Â¿quÃ© categorÃ­a te interesa en ${cityToAsk} (por ejemplo MÃºsica, Deportes, Culturales)?`\n      }], 500);\n      return;\n    }\n    if (intent.intent === 'list_cities') {\n      listCities();\n      return;\n    }\n    // greetings -> friendly human reply and open question\n    if (intent.intent === 'greeting') {\n      botReply([{\n        text: 'Â¡Hola! ğŸ˜Š Â¿En quÃ© ciudad te gustarÃ­a buscar eventos o escribe \"buscar <texto>\" para una bÃºsqueda rÃ¡pida?'\n      }], 500);\n      return;\n    }\n    if (intent.intent === 'help') {\n      botReply([{\n        text: 'Puedo ayudarte a encontrar eventos. Prueba escribir: \"ver ciudades\", \"buscar <texto>\", el nombre de una ciudad (p.e. BogotÃ¡), \"ver mÃ¡s\" o \"volver\" para reiniciar.'\n      }], 600);\n      return;\n    }\n    // user asked to see events -> start the city selection flow\n    if (intent.intent === 'list_events') {\n      listCities();\n      return;\n    }\n    if (intent.intent === 'restart') {\n      restart();\n      return;\n    }\n    if (intent.intent === 'show_more') {\n      selectOption('showMore');\n      return;\n    }\n    if (intent.intent === 'search_query') {\n      // show intermediate typing message\n      botReply([{\n        text: `Perfecto â€” busco \"${intent.query}\"...`\n      }], 500);\n      // do a search across events and show first match (paged)\n      const q = intent.query.toLowerCase();\n      const results = [];\n      Object.keys(eventsData).forEach(city => {\n        Object.keys(eventsData[city]).forEach(cat => {\n          eventsData[city][cat].forEach(ev => {\n            const hay = `${ev.nombre} ${ev.artista} ${ev.lugar}`.toLowerCase();\n            if (hay.includes(q)) results.push({\n              city,\n              category: cat,\n              event: ev\n            });\n          });\n        });\n      });\n      if (results.length === 0) {\n        botReply([{\n          text: `No encontrÃ© nada para \"${intent.query}\". Â¿Quieres que muestre ciudades, intentes otra bÃºsqueda o pidas ayuda? Escribe ver ciudades, buscar <texto> o ayuda.`\n        }], 800);\n      } else {\n        // show first found as event (and set pagination state for that city|category)\n        const r = results[0];\n        const city = capitalizeFirst(r.city);\n        const cat = capitalizeFirst(r.category);\n        // set pages index so showMore continues in that list\n        const key = `${city}|${cat}`;\n        setPages(p => ({\n          ...p,\n          [key]: 0\n        }));\n        botReply([{\n          text: `Resultado para \"${intent.query}\" en ${city} â€” ${cat}:`\n        }, {\n          type: 'event',\n          payload: {\n            ...r.event,\n            fecha: formatDate(r.event.fecha)\n          }\n        }, {\n          text: 'Escribe \"ver mÃ¡s\" para ver otro resultado, o \"volver\" para reiniciar.'\n        }], 700);\n      }\n      return;\n    }\n    if (intent.intent === 'search') {\n      // robust mapping: normalize keys (remove accents) and match\n      const wantedCity = normalizeString(intent.city);\n      const wantedCat = normalizeString(intent.category);\n      let cityKey = null;\n      for (const k of Object.keys(eventsData)) {\n        if (normalizeString(k).startsWith(wantedCity)) {\n          cityKey = k;\n          break;\n        }\n      }\n      let categoryKey = null;\n      if (cityKey) {\n        categoryKey = findCategoryKeyForCity(cityKey, intent.category) || Object.keys(eventsData[cityKey]).find(k => normalizeString(k).startsWith(wantedCat));\n      }\n      if (cityKey && categoryKey) {\n        // show first event and setup pagination for the proper key names\n        const catDisplay = categoryKey;\n        const pageKey = `${cityKey}|${catDisplay}`;\n        setPages(p => ({\n          ...p,\n          [pageKey]: 0\n        }));\n        setSelectedCity(cityKey);\n        setSelectedCategory(catDisplay);\n        showEvents(cityKey, catDisplay);\n      } else {\n        const cityPretty = capitalizeFirst(intent.city);\n        const catPretty = capitalizeFirst(intent.category);\n        botReply([{\n          text: `Lo siento â€” no tengo toda la info exacta para ${cityPretty} y ${catPretty} ahora mismo. Escribe \"ver ciudades\" para ver opciones o intenta otra bÃºsqueda.`\n        }], 600);\n      }\n      return;\n    }\n    if (intent.intent === 'choose_city') {\n      // normalize incoming city name\n      const rawCity = intent.city;\n      const city = capitalizeFirst(rawCity);\n\n      // If we already had a selected city, user is switching city mid-conversation\n      if (selectedCity && selectedCity !== city) {\n        // Attempt to preserve category filter if possible\n        if (selectedCategory) {\n          const validCat = findCategoryKeyForCity(city, selectedCategory);\n          if (validCat) {\n            // Reset pagination for new city+category then show first page\n            const key = `${city}|${validCat}`;\n            setPages(p => ({\n              ...p,\n              [key]: 0\n            }));\n            setSelectedCity(city);\n            setSelectedCategory(validCat);\n            botReply([{\n              text: `Perfecto â€” ahora busco eventos en ${city}. Mantengo la categorÃ­a ${validCat}.`\n            }], 600);\n            // show first item\n            showEvents(city, validCat);\n            return;\n          } else {\n            // category not available in new city: inform and offer alternatives\n            setSelectedCity(city);\n            setSelectedCategory(null);\n            botReply([{\n              text: `CambiÃ© a ${city}, pero no encontrÃ© la categorÃ­a ${selectedCategory} allÃ­.`\n            }, {\n              text: `Puedes elegir otra categorÃ­a: ${CATEGORIES.concat(['Ver todos']).join(', ')}. Escribe la categorÃ­a que prefieras.`\n            }], 700);\n            return;\n          }\n        }\n        // No category to preserve â€” just update city and ask what to do next\n        setSelectedCity(city);\n        setPendingCity(null);\n        botReply([{\n          text: `Perfecto â€” ahora busco eventos en ${city}. Â¿QuÃ© categorÃ­a te interesa? ${CATEGORIES.join(', ')}. Escribe la categorÃ­a.`\n        }], 600);\n        return;\n      }\n\n      // default behavior (no selectedCity previously): show categories for chosen city\n      listCategories(city);\n      return;\n    }\n    if (intent.intent === 'choose_category') {\n      const rawCat = intent.category;\n      // find a valid category key in the currently selected city or pendingCity\n      const cityForLookup = selectedCity || pendingCity;\n      const validCat = cityForLookup ? findCategoryKeyForCity(cityForLookup, rawCat) : null;\n      if (validCat && cityForLookup) {\n        // reset pagination for this city|category\n        const key = `${cityForLookup}|${validCat}`;\n        setPages(p => ({\n          ...p,\n          [key]: 0\n        }));\n        setSelectedCategory(validCat);\n        setSelectedCity(cityForLookup);\n        showEvents(cityForLookup, validCat);\n      } else if (selectedCity && !validCat) {\n        // selected city exists but category not found there\n        botReply([{\n          text: `No encontrÃ© la categorÃ­a solicitada en ${selectedCity}. Puedes elegir otra categorÃ­a: ${CATEGORIES.concat(['Ver todos']).join(', ')}. Escribe la que prefieras.`\n        }], 600);\n      } else {\n        botReply([{\n          text: `Has pedido la categorÃ­a ${capitalizeFirst(rawCat)}. Primero, selecciona una ciudad: ${CITIES.join(', ')}. Escribe la ciudad.`\n        }], 600);\n      }\n      return;\n    }\n    // fallback: use confidence to decide whether to clarify or perform a best-effort\n    if (confidence < 0.6) {\n      botReply([{\n        text: 'No estoy seguro de quÃ© quieres decir â€” Â¿Quieres que muestre ciudades, buscar por texto o ver ayuda? Escribe \"ver ciudades\", \"buscar <texto>\" o \"ayuda\".'\n      }], 600);\n    } else {\n      // try a friendly fallback that asks a clarifying question\n      botReply([{\n        text: 'Â¿Quieres que muestre ciudades, busque por texto o te muestre ayuda? Escribe ver ciudades, buscar <texto> o ayuda.'\n      }], 600);\n    }\n  }, [listCities, listCategories, pushMessage, CATEGORIES, CITIES, selectedCity, showEvents]);\n\n  // API requested: sendText, selectOption, resetConversation\n  const sendText = useCallback(text => {\n    handleText(text);\n  }, [handleText]);\n  const selectOption = useCallback((type, value) => {\n    // type: 'city'|'category'|'action'|'showMore'\n    if (type === 'city') {\n      selectCity(value);\n      return;\n    }\n    if (type === 'category') {\n      selectCategory(value);\n      return;\n    }\n    if (type === 'action' && (value || '').toLowerCase().includes('volver')) {\n      restart();\n      return;\n    }\n    if (type === 'showMore' || type === 'action' && (value || '').toLowerCase().includes('ver m')) {\n      // advance pagination for current selection\n      const city = selectedCity;\n      const category = selectedCategory;\n      if (!city || !category) {\n        botReply([{\n          text: 'Primero selecciona una ciudad y categorÃ­a. Escribe \"ver ciudades\" para ver la lista de ciudades.'\n        }], 500);\n        return;\n      }\n      const key = `${city}|${category}`;\n      const cityData = eventsData[city] || {};\n      const list = cityData[category] || [];\n      const current = pages[key] || 0;\n      const next = current + PAGE_SIZE;\n      if (next >= list.length) {\n        botReply([{\n          text: `No hay mÃ¡s eventos en ${category} para ${city}. Puedes escribir otra categorÃ­a o ciudad, o \"volver\" para reiniciar.`\n        }], 600);\n        return;\n      }\n      // advance page index then show next PAGE_SIZE items\n      setPages(p => ({\n        ...p,\n        [key]: next\n      }));\n      // show events from next index\n      const slice = list.slice(next, next + PAGE_SIZE);\n      const items = [{\n        text: `AquÃ­ tienes mÃ¡s eventos en ${category} Â· ${city}:`\n      }];\n      slice.forEach(ev => items.push({\n        type: 'event',\n        payload: {\n          ...ev,\n          fecha: formatDate(ev.fecha)\n        }\n      }));\n      items.push({\n        text: next + PAGE_SIZE < list.length ? 'Escribe \"ver mÃ¡s\" para seguir viendo eventos.' : 'No quedan mÃ¡s eventos en esta lista. Escribe otra categorÃ­a o ciudad, o \"volver\".'\n      });\n      botReply(items, 700);\n      return;\n    }\n  }, [listCategories, pushMessage, showEvents, selectedCity, selectedCategory, pages, PAGE_SIZE, botReply]);\n\n  // helper functions local to hook\n  function capitalizeFirst(s) {\n    if (!s) return s;\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n  }\n  function normalizeString(s) {\n    if (!s) return '';\n    return s.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').trim();\n  }\n  function normalizeCityName(raw) {\n    if (!raw) return raw;\n    const r = raw.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    if (r.startsWith('medell')) return 'MedellÃ­n';\n    if (r.startsWith('bogo')) return 'BogotÃ¡';\n    if (r.startsWith('cali')) return 'Cali';\n    if (r.startsWith('bucara')) return 'Bucaramanga';\n    return raw;\n  }\n\n  // find a category key in a city by comparing normalized strings (handles accents)\n  function findCategoryKeyForCity(city, catLike) {\n    if (!city || !catLike) return null;\n    const cityData = eventsData[city] || {};\n    const cats = Object.keys(cityData || {});\n    const target = catLike.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    for (const k of cats) {\n      const nk = k.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n      if (nk === target || nk.startsWith(target)) return k;\n    }\n    return null;\n  }\n  const selectCity = useCallback(city => {\n    if (!city) return;\n    setSelectedCity(city);\n    listCategories(city);\n  }, [listCategories]);\n  const selectCategory = useCallback(category => {\n    if (!category) return;\n    const cityToUse = selectedCity || pendingCity;\n    if (!cityToUse) {\n      pushMessage('ia', 'Primero, elige una ciudad para buscar.');\n      listCities();\n      return;\n    }\n    // clear pendingCity after consuming\n    setPendingCity(null);\n    showEvents(cityToUse, category);\n  }, [selectedCity, pendingCity, pushMessage, listCities, showEvents]);\n  const restart = useCallback(() => {\n    setState('idle');\n    setSelectedCity(null);\n    setSelectedCategory(null);\n    setMessages([{\n      id: genId('msg'),\n      sender: 'ia',\n      text: 'Â¡Hola de nuevo! Dime en quÃ© ciudad buscas y preparo algunas opciones para ti.',\n      time: new Date().toISOString()\n    }]);\n  }, []);\n  const toggleOpen = useCallback(() => setOpen(o => !o), []);\n  return {\n    open,\n    state,\n    selectedCity,\n    selectedCategory,\n    messages,\n    isTyping,\n    // API methods requested\n    sendText: sendText,\n    selectOption: selectOption,\n    resetConversation: restart,\n    toggleOpen,\n    // legacy actions object for UI compatibility\n    actions: {\n      pushMessage,\n      handleText,\n      listCities,\n      listCategories,\n      selectCity,\n      selectCategory,\n      showEvents,\n      restart,\n      toggleOpen,\n      // expose newer API on actions for backward compatibility\n      selectOption,\n      sendText,\n      resetConversation: restart\n    }\n  };\n}\n_s(useChatBot, \"FJDbS/sQPybzCwr2pg9vQBXnAi8=\");\nexport default useChatBot;","map":{"version":3,"names":["useState","useCallback","eventsData","genId","formatDate","parseIntent","sleep","CITIES","CATEGORIES","useChatBot","_s","PAGE_SIZE","open","setOpen","state","setState","selectedCity","setSelectedCity","selectedCategory","setSelectedCategory","messages","setMessages","id","sender","text","time","Date","toISOString","isTyping","setIsTyping","pages","setPages","pendingCity","setPendingCity","pushMessage","msg","m","botReply","items","delay","typingId","type","prev","filter","x","concat","map","it","listCities","join","listCategories","city","showEvents","category","key","cityData","list","p","length","start","slice","push","forEach","ev","formatted","fecha","payload","guidance","handleText","trim","t","intent","confidence","parsedCity","parsedCategory","mapCity","raw","byName","normalizeCityName","target","normalizeString","k","Object","keys","startsWith","capitalizeFirst","mapCategory","cityForLookup","found","findCategoryKeyForCity","cityKey","cats","c","mappedCity","mappedCategory","lowerRaw","toLowerCase","explicitChange","test","finalCity","finalCategory","setTimeout","catToAsk","cityToAsk","restart","selectOption","query","q","results","cat","hay","nombre","artista","lugar","includes","event","r","wantedCity","wantedCat","categoryKey","find","catDisplay","pageKey","cityPretty","catPretty","rawCity","validCat","rawCat","sendText","value","selectCity","selectCategory","current","next","s","charAt","toUpperCase","normalize","replace","catLike","nk","cityToUse","toggleOpen","o","resetConversation","actions"],"sources":["C:/Users/crist/OneDrive/Documents/Clonado fronted despliegue/prueba-desplegue/Proyecto-Integrador-fronted-main/src/components/ChatBotLogic.jsx"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport eventsData from '../data/events';\r\nimport { genId, formatDate, parseIntent, sleep } from '../utils/chatHelpers';\r\n\r\n// NOTE: Do not change selector names or external classes. This module is pure logic.\r\n\r\nconst CITIES = ['Cali', 'MedellÃ­n', 'BogotÃ¡', 'Bucaramanga', 'Cartagena', 'Barranquilla'];\r\nconst CATEGORIES = ['MÃºsica', 'Deportes', 'Culturales', 'Conferencias'];\r\n\r\nexport function useChatBot() {\r\n  const PAGE_SIZE = 1; // configurable page size (mostrar X por acciÃ³n)\r\n\r\n  const [open, setOpen] = useState(true);\r\n  const [state, setState] = useState('idle'); // idle | esperandoCiudad | esperandoCategoria | mostrandoEventos\r\n  const [selectedCity, setSelectedCity] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [messages, setMessages] = useState(() => [\r\n    { id: genId('msg'), sender: 'ia', text: 'Â¡Hola! Soy tu asistente de eventos â€” encantado de ayudarte. Â¿En quÃ© ciudad te gustarÃ­a buscar?', time: new Date().toISOString() },\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  // pagination index per city|category key\r\n  const [pages, setPages] = useState({});\r\n  // keep a pending city context when bot asked for category but selectedCity may not be set yet\r\n  const [pendingCity, setPendingCity] = useState(null);\r\n\r\n  const pushMessage = useCallback((sender, text) => {\r\n    const msg = { id: genId('msg'), sender, text, time: new Date().toISOString() };\r\n    setMessages((m) => [...m, msg]);\r\n    return msg;\r\n  }, []);\r\n\r\n  // Helper to simulate typing and then send one or multiple bot messages\r\n  const botReply = useCallback((items = [], delay = 600) => {\r\n    // items: array of message objects to push after typing\r\n    (async () => {\r\n      setIsTyping(true);\r\n      // push typing indicator (UI will render the animated dots)\r\n      const typingId = genId('typing');\r\n      setMessages((m) => [...m, { id: typingId, sender: 'ia', type: 'typing', text: 'Un momento, busco lo mejor para ti ğŸ˜Š' }]);\r\n      await sleep(delay);\r\n      // remove typing indicator and append items\r\n      setMessages((prev) => prev.filter((x) => x.id !== typingId).concat(items.map((it) => ({ id: genId('msg'), sender: 'ia', ...it, time: new Date().toISOString() }))));\r\n      setIsTyping(false);\r\n    })();\r\n  }, []);\r\n\r\n  const listCities = useCallback(() => {\r\n    setState('esperandoCiudad');\r\n    // send a text prompt listing cities (conversational, user must type the city name)\r\n    botReply([\r\n      { text: `Selecciona una ciudad: ${CITIES.join(', ')}. Escribe el nombre de la ciudad para continuar.` },\r\n    ], 700);\r\n  }, [pushMessage]);\r\n\r\n  const listCategories = useCallback((city) => {\r\n    setState('esperandoCategoria');\r\n    setPendingCity(city);\r\n    botReply([\r\n      { text: `Has seleccionado ${city}. Â¿QuÃ© categorÃ­a quieres ver? ${CATEGORIES.join(', ')}. Escribe la categorÃ­a.` },\r\n    ], 700);\r\n  }, [pushMessage]);\r\n\r\n  const showEvents = useCallback((city, category) => {\r\n    setState('mostrandoEventos');\r\n    setSelectedCity(city);\r\n    setSelectedCategory(category);\r\n\r\n    const key = `${city}|${category}`;\r\n    const cityData = eventsData[city] || {};\r\n    const list = cityData[category] || [];\r\n\r\n    // initialize page index if needed\r\n    setPages((p) => ({ ...p, [key]: p[key] ? p[key] : 0 }));\r\n\r\n    if (list.length === 0) {\r\n      botReply([\r\n        { text: `Ups â€” no encuentro ${category} en ${city} ahora mismo. Puedes escribir otra ciudad, otra categorÃ­a, o \"volver\" para reiniciar.` },\r\n      ], 600);\r\n      return;\r\n    }\r\n\r\n    // show PAGE_SIZE items starting from pages[key]\r\n    const start = (pages[key] || 0);\r\n    const slice = list.slice(start, start + PAGE_SIZE);\r\n  const items = [];\r\n  // Use a neutral, non-counting intro to avoid revealing small totals.\r\n  items.push({ text: `AquÃ­ tienes algunos eventos en ${category} Â· ${city}:` });\r\n    slice.forEach((ev) => {\r\n      const formatted = { ...ev, fecha: formatDate(ev.fecha) };\r\n      items.push({ type: 'event', payload: formatted });\r\n    });\r\n    // guidance for next steps (conversational)\r\n    const guidance = [];\r\n    if (start + PAGE_SIZE < list.length) guidance.push('Si quieres ver mÃ¡s, escribe \"ver mÃ¡s\".');\r\n    guidance.push('Para cambiar de ciudad escribe el nombre de la ciudad. Escribe \"volver\" para volver al inicio.');\r\n    items.push({ text: guidance.join(' ') });\r\n    botReply(items, 800);\r\n  }, [pushMessage]);\r\n\r\n  const handleText = useCallback((text) => {\r\n    if (!text || !text.trim()) return;\r\n    const t = text.trim();\r\n    pushMessage('user', t);\r\n    // use parseIntent from helpers\r\n    const intent = parseIntent(t);\r\n\r\n    // If parser returned a confidence score, use it to decide clarifications\r\n    const confidence = (typeof intent.confidence === 'number') ? intent.confidence : 1.0;\r\n\r\n    // Merge parsed city/category into conversation state (do not overwrite existing unless explicit change requested)\r\n    const parsedCity = intent.city || null;\r\n    const parsedCategory = intent.category || null;\r\n\r\n    // helpers to map parsed tokens into canonical keys used by eventsData\r\n    function mapCity(raw) {\r\n      if (!raw) return null;\r\n      // prefer normalizeCityName if it maps\r\n      const byName = normalizeCityName(raw);\r\n      if (byName && eventsData[byName]) return byName;\r\n      const target = normalizeString(raw);\r\n      for (const k of Object.keys(eventsData)) {\r\n        if (normalizeString(k).startsWith(target)) return k;\r\n      }\r\n      return byName || capitalizeFirst(raw);\r\n    }\r\n\r\n    function mapCategory(raw, cityForLookup) {\r\n      if (!raw) return null;\r\n      // if we have a city, prefer finding a category key within that city\r\n      if (cityForLookup) {\r\n        const found = findCategoryKeyForCity(cityForLookup, raw);\r\n        if (found) return found;\r\n      }\r\n      // otherwise search globally across cities for a matching category key\r\n      const target = normalizeString(raw);\r\n      for (const cityKey of Object.keys(eventsData)) {\r\n        const cats = Object.keys(eventsData[cityKey] || {});\r\n        for (const c of cats) {\r\n          if (normalizeString(c).startsWith(target) || normalizeString(c) === target) return c;\r\n        }\r\n      }\r\n      // fallback: return capitalized raw\r\n      return capitalizeFirst(raw);\r\n    }\r\n\r\n    // Determine mapped values (do not commit to state yet)\r\n    const mappedCity = parsedCity ? mapCity(parsedCity) : null;\r\n    const mappedCategory = parsedCategory ? mapCategory(parsedCategory, mappedCity || selectedCity) : null;\r\n\r\n    // detect explicit change request keywords in user's message (approximate)\r\n    const lowerRaw = (t || '').toLowerCase();\r\n    const explicitChange = /\\b(cambiar|cambio|cambia|nuevo|otra ciudad|otra categoria|otra categorÃ­a|cambiar a)\\b/.test(lowerRaw);\r\n\r\n    // Apply parsed city if we don't have one yet or user explicitly asked to change\r\n    if (mappedCity) {\r\n      if (!selectedCity) {\r\n        setSelectedCity(mappedCity);\r\n      } else if (selectedCity !== mappedCity && explicitChange) {\r\n        setSelectedCity(mappedCity);\r\n      }\r\n    }\r\n\r\n    // Apply parsed category if we don't have one yet or user explicitly asked to change\r\n    if (mappedCategory) {\r\n      if (!selectedCategory) {\r\n        setSelectedCategory(mappedCategory);\r\n      } else if (selectedCategory !== mappedCategory && explicitChange) {\r\n        setSelectedCategory(mappedCategory);\r\n      }\r\n    }\r\n\r\n    // If after applying parsed tokens we have both city and category, perform immediate search\r\n    const finalCity = mappedCity || selectedCity;\r\n    const finalCategory = mappedCategory || selectedCategory;\r\n    if (finalCity && finalCategory) {\r\n      // ensure pagination cursor reset for this pair\r\n      const key = `${finalCity}|${finalCategory}`;\r\n      setPages((p) => ({ ...p, [key]: 0 }));\r\n      setSelectedCity(finalCity);\r\n      setSelectedCategory(finalCategory);\r\n      // Show first event immediately\r\n      botReply([{ text: `Perfecto â€” buscando ${finalCategory} en ${finalCity}...` }], 400);\r\n      // slight delay then show events (showEvents will simulate typing too)\r\n      setTimeout(() => showEvents(finalCity, finalCategory), 600);\r\n      return;\r\n    }\r\n\r\n    // If we only have category, ask for city\r\n    if ((mappedCategory || selectedCategory) && !(mappedCity || selectedCity)) {\r\n      const catToAsk = mappedCategory || selectedCategory;\r\n      botReply([{ text: `Â¿En quÃ© ciudad quieres buscar ${catToAsk}? Por ejemplo BogotÃ¡, MedellÃ­n, Cali o Bucaramanga.` }], 500);\r\n      return;\r\n    }\r\n\r\n    // If we only have city, ask for category\r\n    if ((mappedCity || selectedCity) && !(mappedCategory || selectedCategory)) {\r\n      const cityToAsk = mappedCity || selectedCity;\r\n      botReply([{ text: `Genial â€” Â¿quÃ© categorÃ­a te interesa en ${cityToAsk} (por ejemplo MÃºsica, Deportes, Culturales)?` }], 500);\r\n      return;\r\n    }\r\n\r\n    if (intent.intent === 'list_cities') { listCities(); return; }\r\n    // greetings -> friendly human reply and open question\r\n    if (intent.intent === 'greeting') {\r\n      botReply([{ text: 'Â¡Hola! ğŸ˜Š Â¿En quÃ© ciudad te gustarÃ­a buscar eventos o escribe \"buscar <texto>\" para una bÃºsqueda rÃ¡pida?' }], 500);\r\n      return;\r\n    }\r\n    if (intent.intent === 'help') {\r\n      botReply([\r\n        { text: 'Puedo ayudarte a encontrar eventos. Prueba escribir: \"ver ciudades\", \"buscar <texto>\", el nombre de una ciudad (p.e. BogotÃ¡), \"ver mÃ¡s\" o \"volver\" para reiniciar.' }\r\n      ], 600);\r\n      return;\r\n    }\r\n    // user asked to see events -> start the city selection flow\r\n    if (intent.intent === 'list_events') { listCities(); return; }\r\n    if (intent.intent === 'restart') { restart(); return; }\r\n    if (intent.intent === 'show_more') { selectOption('showMore'); return; }\r\n\r\n    if (intent.intent === 'search_query') {\r\n      // show intermediate typing message\r\n      botReply([{ text: `Perfecto â€” busco \"${intent.query}\"...` }], 500);\r\n      // do a search across events and show first match (paged)\r\n      const q = intent.query.toLowerCase();\r\n      const results = [];\r\n      Object.keys(eventsData).forEach((city) => {\r\n        Object.keys(eventsData[city]).forEach((cat) => {\r\n          eventsData[city][cat].forEach((ev) => {\r\n            const hay = `${ev.nombre} ${ev.artista} ${ev.lugar}`.toLowerCase();\r\n            if (hay.includes(q)) results.push({ city, category: cat, event: ev });\r\n          });\r\n        });\r\n      });\r\n      if (results.length === 0) {\r\n        botReply([{ text: `No encontrÃ© nada para \"${intent.query}\". Â¿Quieres que muestre ciudades, intentes otra bÃºsqueda o pidas ayuda? Escribe ver ciudades, buscar <texto> o ayuda.` }], 800);\r\n      } else {\r\n        // show first found as event (and set pagination state for that city|category)\r\n        const r = results[0];\r\n        const city = capitalizeFirst(r.city);\r\n        const cat = capitalizeFirst(r.category);\r\n        // set pages index so showMore continues in that list\r\n        const key = `${city}|${cat}`;\r\n        setPages((p) => ({ ...p, [key]: 0 }));\r\n        botReply([{ text: `Resultado para \"${intent.query}\" en ${city} â€” ${cat}:` }, { type: 'event', payload: { ...r.event, fecha: formatDate(r.event.fecha) } }, { text: 'Escribe \"ver mÃ¡s\" para ver otro resultado, o \"volver\" para reiniciar.' }], 700);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (intent.intent === 'search') {\r\n      // robust mapping: normalize keys (remove accents) and match\r\n      const wantedCity = normalizeString(intent.city);\r\n      const wantedCat = normalizeString(intent.category);\r\n      let cityKey = null;\r\n      for (const k of Object.keys(eventsData)) {\r\n        if (normalizeString(k).startsWith(wantedCity)) { cityKey = k; break; }\r\n      }\r\n      let categoryKey = null;\r\n      if (cityKey) {\r\n        categoryKey = findCategoryKeyForCity(cityKey, intent.category) || Object.keys(eventsData[cityKey]).find(k => normalizeString(k).startsWith(wantedCat));\r\n      }\r\n      if (cityKey && categoryKey) {\r\n        // show first event and setup pagination for the proper key names\r\n        const catDisplay = categoryKey;\r\n        const pageKey = `${cityKey}|${catDisplay}`;\r\n        setPages((p) => ({ ...p, [pageKey]: 0 }));\r\n        setSelectedCity(cityKey);\r\n        setSelectedCategory(catDisplay);\r\n        showEvents(cityKey, catDisplay);\r\n      } else {\r\n        const cityPretty = capitalizeFirst(intent.city);\r\n        const catPretty = capitalizeFirst(intent.category);\r\n        botReply([{ text: `Lo siento â€” no tengo toda la info exacta para ${cityPretty} y ${catPretty} ahora mismo. Escribe \"ver ciudades\" para ver opciones o intenta otra bÃºsqueda.` }], 600);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (intent.intent === 'choose_city') {\r\n      // normalize incoming city name\r\n      const rawCity = intent.city;\r\n      const city = capitalizeFirst(rawCity);\r\n\r\n      // If we already had a selected city, user is switching city mid-conversation\r\n      if (selectedCity && selectedCity !== city) {\r\n        // Attempt to preserve category filter if possible\r\n        if (selectedCategory) {\r\n          const validCat = findCategoryKeyForCity(city, selectedCategory);\r\n          if (validCat) {\r\n            // Reset pagination for new city+category then show first page\r\n            const key = `${city}|${validCat}`;\r\n            setPages((p) => ({ ...p, [key]: 0 }));\r\n            setSelectedCity(city);\r\n            setSelectedCategory(validCat);\r\n            botReply([{ text: `Perfecto â€” ahora busco eventos en ${city}. Mantengo la categorÃ­a ${validCat}.` }], 600);\r\n            // show first item\r\n            showEvents(city, validCat);\r\n            return;\r\n          } else {\r\n            // category not available in new city: inform and offer alternatives\r\n            setSelectedCity(city);\r\n            setSelectedCategory(null);\r\n            botReply([\r\n              { text: `CambiÃ© a ${city}, pero no encontrÃ© la categorÃ­a ${selectedCategory} allÃ­.` },\r\n                { text: `Puedes elegir otra categorÃ­a: ${CATEGORIES.concat(['Ver todos']).join(', ')}. Escribe la categorÃ­a que prefieras.` },\r\n            ], 700);\r\n            return;\r\n          }\r\n        }\r\n        // No category to preserve â€” just update city and ask what to do next\r\n        setSelectedCity(city);\r\n        setPendingCity(null);\r\n        botReply([{ text: `Perfecto â€” ahora busco eventos en ${city}. Â¿QuÃ© categorÃ­a te interesa? ${CATEGORIES.join(', ')}. Escribe la categorÃ­a.` }], 600);\r\n        return;\r\n      }\r\n\r\n      // default behavior (no selectedCity previously): show categories for chosen city\r\n      listCategories(city);\r\n      return;\r\n    }\r\n\r\n    if (intent.intent === 'choose_category') {\r\n      const rawCat = intent.category;\r\n      // find a valid category key in the currently selected city or pendingCity\r\n      const cityForLookup = selectedCity || pendingCity;\r\n      const validCat = cityForLookup ? findCategoryKeyForCity(cityForLookup, rawCat) : null;\r\n      if (validCat && cityForLookup) {\r\n        // reset pagination for this city|category\r\n        const key = `${cityForLookup}|${validCat}`;\r\n        setPages((p) => ({ ...p, [key]: 0 }));\r\n        setSelectedCategory(validCat);\r\n        setSelectedCity(cityForLookup);\r\n        showEvents(cityForLookup, validCat);\r\n      } else if (selectedCity && !validCat) {\r\n        // selected city exists but category not found there\r\n        botReply([{ text: `No encontrÃ© la categorÃ­a solicitada en ${selectedCity}. Puedes elegir otra categorÃ­a: ${CATEGORIES.concat(['Ver todos']).join(', ')}. Escribe la que prefieras.` }], 600);\r\n      } else {\r\n        botReply([{ text: `Has pedido la categorÃ­a ${capitalizeFirst(rawCat)}. Primero, selecciona una ciudad: ${CITIES.join(', ')}. Escribe la ciudad.` }], 600);\r\n      }\r\n      return;\r\n    }\r\n    // fallback: use confidence to decide whether to clarify or perform a best-effort\r\n    if (confidence < 0.6) {\r\n      botReply([{ text: 'No estoy seguro de quÃ© quieres decir â€” Â¿Quieres que muestre ciudades, buscar por texto o ver ayuda? Escribe \"ver ciudades\", \"buscar <texto>\" o \"ayuda\".' }], 600);\r\n    } else {\r\n      // try a friendly fallback that asks a clarifying question\r\n      botReply([{ text: 'Â¿Quieres que muestre ciudades, busque por texto o te muestre ayuda? Escribe ver ciudades, buscar <texto> o ayuda.' }], 600);\r\n    }\r\n  }, [listCities, listCategories, pushMessage, CATEGORIES, CITIES, selectedCity, showEvents]);\r\n\r\n  \r\n\r\n  // API requested: sendText, selectOption, resetConversation\r\n  const sendText = useCallback((text) => {\r\n    handleText(text);\r\n  }, [handleText]);\r\n\r\n  const selectOption = useCallback((type, value) => {\r\n    // type: 'city'|'category'|'action'|'showMore'\r\n    if (type === 'city') { selectCity(value); return; }\r\n    if (type === 'category') { selectCategory(value); return; }\r\n    if (type === 'action' && (value||'').toLowerCase().includes('volver')) { restart(); return; }\r\n      if (type === 'showMore' || (type === 'action' && (value||'').toLowerCase().includes('ver m'))) {\r\n      // advance pagination for current selection\r\n      const city = selectedCity;\r\n      const category = selectedCategory;\r\n      if (!city || !category) { botReply([{ text: 'Primero selecciona una ciudad y categorÃ­a. Escribe \"ver ciudades\" para ver la lista de ciudades.' }], 500); return; }\r\n      const key = `${city}|${category}`;\r\n      const cityData = eventsData[city] || {};\r\n      const list = cityData[category] || [];\r\n      const current = pages[key] || 0;\r\n      const next = current + PAGE_SIZE;\r\n      if (next >= list.length) {\r\n        botReply([{ text: `No hay mÃ¡s eventos en ${category} para ${city}. Puedes escribir otra categorÃ­a o ciudad, o \"volver\" para reiniciar.` }], 600);\r\n        return;\r\n      }\r\n      // advance page index then show next PAGE_SIZE items\r\n      setPages((p) => ({ ...p, [key]: next }));\r\n      // show events from next index\r\n      const slice = list.slice(next, next + PAGE_SIZE);\r\n      const items = [{ text: `AquÃ­ tienes mÃ¡s eventos en ${category} Â· ${city}:` }];\r\n      slice.forEach((ev) => items.push({ type: 'event', payload: { ...ev, fecha: formatDate(ev.fecha) } }));\r\n      items.push({ text: (next + PAGE_SIZE < list.length) ? 'Escribe \"ver mÃ¡s\" para seguir viendo eventos.' : 'No quedan mÃ¡s eventos en esta lista. Escribe otra categorÃ­a o ciudad, o \"volver\".' });\r\n      botReply(items, 700);\r\n      return;\r\n    }\r\n  }, [listCategories, pushMessage, showEvents, selectedCity, selectedCategory, pages, PAGE_SIZE, botReply]);\r\n\r\n  // helper functions local to hook\r\n  function capitalizeFirst(s) {\r\n    if (!s) return s;\r\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\r\n  }\r\n\r\n  function normalizeString(s) {\r\n    if (!s) return '';\r\n    return s.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').trim();\r\n  }\r\n\r\n  function normalizeCityName(raw) {\r\n    if (!raw) return raw;\r\n    const r = raw.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n    if (r.startsWith('medell')) return 'MedellÃ­n';\r\n    if (r.startsWith('bogo')) return 'BogotÃ¡';\r\n    if (r.startsWith('cali')) return 'Cali';\r\n    if (r.startsWith('bucara')) return 'Bucaramanga';\r\n    return raw;\r\n  }\r\n\r\n  // find a category key in a city by comparing normalized strings (handles accents)\r\n  function findCategoryKeyForCity(city, catLike) {\r\n    if (!city || !catLike) return null;\r\n    const cityData = eventsData[city] || {};\r\n    const cats = Object.keys(cityData || {});\r\n    const target = catLike.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n    for (const k of cats) {\r\n      const nk = k.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n      if (nk === target || nk.startsWith(target)) return k;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const selectCity = useCallback((city) => {\r\n    if (!city) return;\r\n    setSelectedCity(city);\r\n    listCategories(city);\r\n  }, [listCategories]);\r\n\r\n  const selectCategory = useCallback((category) => {\r\n    if (!category) return;\r\n    const cityToUse = selectedCity || pendingCity;\r\n    if (!cityToUse) {\r\n      pushMessage('ia', 'Primero, elige una ciudad para buscar.');\r\n      listCities();\r\n      return;\r\n    }\r\n    // clear pendingCity after consuming\r\n    setPendingCity(null);\r\n    showEvents(cityToUse, category);\r\n  }, [selectedCity, pendingCity, pushMessage, listCities, showEvents]);\r\n\r\n  const restart = useCallback(() => {\r\n    setState('idle');\r\n    setSelectedCity(null);\r\n    setSelectedCategory(null);\r\n    setMessages([{ id: genId('msg'), sender: 'ia', text: 'Â¡Hola de nuevo! Dime en quÃ© ciudad buscas y preparo algunas opciones para ti.', time: new Date().toISOString() }]);\r\n  }, []);\r\n\r\n  const toggleOpen = useCallback(() => setOpen((o) => !o), []);\r\n\r\n  return {\r\n    open,\r\n    state,\r\n    selectedCity,\r\n    selectedCategory,\r\n    messages,\r\n    isTyping,\r\n    // API methods requested\r\n    sendText: sendText,\r\n    selectOption: selectOption,\r\n    resetConversation: restart,\r\n    toggleOpen,\r\n    // legacy actions object for UI compatibility\r\n    actions: {\r\n      pushMessage,\r\n      handleText,\r\n      listCities,\r\n      listCategories,\r\n      selectCity,\r\n      selectCategory,\r\n      showEvents,\r\n      restart,\r\n      toggleOpen,\r\n      // expose newer API on actions for backward compatibility\r\n      selectOption,\r\n      sendText,\r\n      resetConversation: restart,\r\n    },\r\n  };\r\n}\r\n\r\nexport default useChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}